// Code generated by go-bindata.
// sources:
// sql/0000_initialize.sql
// sql/0010_audience.sql
// sql/0020_application.sql
// sql/0030_user.sql
// sql/0100_option.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sql0000_initializeSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xc1\x6e\xdb\x38\x14\x3c\x9b\x5f\x31\xf0\x1a\x90\x85\x58\x45\x7b\xdc\x18\x39\x38\x0e\xe3\x35\xe0\xc8\xbb\x92\xbc\x09\x50\xb7\x06\x57\x7a\x91\x08\x48\x94\x4a\x52\x49\xbc\xe8\xc7\x2f\x28\xc5\x1b\x27\x4d\xda\x1e\x7a\xb1\x6c\xbe\xd1\x7b\x33\x43\x72\x1c\x04\x38\xa9\x64\xae\x85\x25\x6c\x1a\x16\x04\x88\xff\x5a\x41\x2a\x18\x4a\xad\xac\x15\xbc\x4d\xe3\x41\x1a\xd0\x03\xa5\xad\xa5\x0c\xf7\x05\x29\xd8\x42\x1a\xf4\xef\x39\x90\x34\x10\x4d\x53\x4a\xca\xd8\x3c\xe2\xb3\x84\x83\xdf\x24\x3c\x8c\x97\xeb\x10\xcb\x4b\x84\xeb\x04\xfc\x66\x19\x27\x31\x86\x4d\x9e\xea\x7d\x63\xeb\xe1\xf4\x87\xd0\x56\x89\x34\x25\x65\x7f\x02\x5a\x18\x5b\x6b\x1a\x4e\x19\x3b\x16\x14\x5b\x61\xa9\x22\x65\xcf\x29\x97\xea\xd0\x64\x1d\x21\xe2\x7f\xae\x66\x73\x8e\xcb\x4d\x38\x4f\x5c\xbb\xb6\xc9\x84\xa5\x9d\x95\x15\x19\x2b\xaa\x66\xec\xb3\x88\x27\x9b\x28\x8c\x91\x44\xcb\xc5\x82\x47\x98\xc5\x18\x8d\xd8\x05\x9f\xaf\x66\x11\x67\x00\x90\xd6\x25\x12\x7e\x93\xe0\xf4\x0c\x5f\xda\xda\xd2\x4e\x66\xa4\xec\x38\x59\xec\x66\xd1\xe2\xef\x8f\xef\x3f\xf9\x53\x76\xce\x17\xcb\xb0\x83\x87\xfc\xda\x21\xdd\xe3\xb7\x33\xf4\x8c\xc7\x69\x5d\x4e\x10\xae\xaf\xc7\xfe\xe9\xa9\xa5\x07\xeb\x4f\x19\xd0\x8f\x76\xc8\x29\xe3\xe1\xc5\x94\x8d\x46\x58\xcd\xc2\xc5\x66\xb6\xe0\x68\xca\x26\x37\x5f\xca\x29\xfb\x9e\x1e\x53\xb6\xb9\xbc\xdd\x8f\x87\x77\xa2\x6c\x69\xd8\xd1\x3c\x92\xe4\x48\xf7\x7a\x80\x20\x80\xa6\xaa\xbe\x23\x83\xde\x6e\x83\x71\x26\x45\xaa\xa5\x95\x29\x8c\xcc\x95\xf1\x71\xab\xeb\x0a\x02\xb9\xbc\x23\x05\x63\xb5\x54\x39\x82\x80\x01\xd7\xcb\xe4\x8f\xa7\x9d\xa2\x6c\xe8\xfa\x8e\x3b\xbd\x31\x5f\xf1\x79\x82\x43\xed\xc0\xc5\x77\x88\xc7\xef\x0c\xf0\x27\x3d\x87\xb2\xbe\x27\x9d\x0a\x43\x06\xb6\xa0\xc7\x19\x0c\x18\xfe\x5f\xf8\xb6\x75\x57\x7a\xa3\x2f\x70\x19\xad\xaf\x9e\x51\x3b\x9a\xa6\xa9\x29\x45\xea\x24\xab\xbd\x2d\x9c\x1a\x5b\x08\xeb\x19\xa8\xda\x42\xa0\x24\x6b\x49\x4f\xa0\xda\xea\x1f\xf7\x1c\x06\xc3\x09\x6a\x8d\x56\x65\xa4\x4d\xea\x36\xce\xdb\x79\x3e\xee\xa5\x2d\x5c\xd1\xf1\x2c\xf6\x4d\x41\x4a\xbc\xea\x81\xa6\x9c\x1e\x9a\xdd\xe3\xd4\x03\xe3\x09\xbc\x8f\x9f\x45\xf0\xef\xfb\xe0\xf7\xed\x76\x17\x7c\x3a\xf1\x26\xf0\x02\xf7\x91\x4b\xef\x0d\x39\x4f\x6e\x1c\xa9\xb1\x5a\x56\xc6\xf1\x80\xbc\x75\xee\xed\x41\x0f\xd2\x58\xd4\xaa\xf3\xb2\x20\x91\x39\xf6\x56\xc8\x12\xf5\xed\x0b\x7f\xdd\xcb\xd5\x4f\x90\x7e\x53\x43\xb0\xdd\x9e\x8c\x1c\x6b\xcf\x9f\xc0\xfb\xbc\xdd\x06\xfd\x8f\xd7\x05\x1c\xd9\xe4\x14\x1c\x0f\x3c\x1c\xd6\x1e\x78\xe0\xf5\xfc\xf4\xbb\x74\x8a\x93\x68\x39\x4f\xb0\xbc\xba\xda\x24\xb3\xf3\x15\xef\x6f\x7d\xaa\x49\x58\xb7\xa3\xdd\xe1\xef\x4f\x6c\xa7\x54\xa7\xdd\x4d\x95\xca\xd6\xdd\x42\x66\xac\x5b\x68\x2b\x85\xd6\xf4\x5b\x4f\x30\x0d\xa5\xf2\x56\x52\x06\x43\x8d\xd0\xc2\xd6\xfa\x70\xbf\x9e\x2e\x15\xd9\x9d\xeb\xbd\x73\xbd\x77\x69\x5d\x8e\x7d\x86\x17\x31\xc1\x5e\xc6\x84\x1b\xff\xc3\x90\xc0\xc0\x91\xfa\x2e\xee\x43\x8f\xeb\xb4\x39\xdc\x21\x59\x06\xfc\x86\xcf\x37\x09\x87\xf7\xe8\xe2\xe8\xc3\x3b\x0f\x5f\xbf\x76\x83\xd9\x60\x13\x2f\xc3\x85\x4b\x12\x36\x58\x86\xc9\xda\xad\x4e\xc1\xc0\xfa\x46\xa7\x67\xd0\xa4\xea\x77\x87\xb8\x30\x3a\xf5\xa7\x6c\xc0\x06\xaf\x66\x55\x66\xec\xa4\x33\xd7\x31\xf9\x36\xa6\xde\x48\xa9\x57\x03\x99\xab\xec\x79\xe5\xa2\xbe\x57\xbf\xe0\xdf\xe7\xbf\x00\x00\x00\xff\xff\x38\xb3\xc6\xb7\xcf\x06\x00\x00")

func sql0000_initializeSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0000_initializeSql,
		"sql/0000_initialize.sql",
	)
}

func sql0000_initializeSql() (*asset, error) {
	bytes, err := sql0000_initializeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0000_initialize.sql", size: 1743, mode: os.FileMode(511), modTime: time.Unix(1599225415, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0010_audienceSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4f\x6f\xda\x40\x10\xc5\xef\xfe\x14\x4f\xb9\x60\xd4\x20\xd1\x34\xe5\x92\x93\xb1\x07\x70\x63\x6c\x67\xbd\xdb\xc2\xc9\x5a\xd9\x53\x58\x15\xff\x91\xbd\x28\xfd\xf8\x15\x7f\x0a\x34\xb9\x55\xb9\xad\x34\xef\x37\xfb\x34\xef\x8d\x46\xf8\x54\x99\x4d\xa7\x2d\x43\xb5\xce\x68\x84\xec\x25\x82\xa9\xd1\x73\x61\x4d\x53\x63\xa0\xda\x01\x4c\x0f\xfe\xcd\xc5\xde\x72\x89\xd7\x2d\xd7\xb0\x5b\xd3\xe3\xc4\x1d\x44\xa6\x87\x6e\xdb\x9d\xe1\xd2\x71\x7c\x41\x9e\x24\xc8\x75\x4a\x90\xc9\x33\xc5\xb9\x17\xcd\x13\x11\xca\xc5\x12\x5e\x06\x8a\xd5\x12\xee\x60\x91\x3d\x7c\x9d\x0c\xee\x31\x10\xc7\xc7\xf0\xe9\x0a\x7a\xd3\x88\x10\xce\x10\x27\x12\xb4\x0a\x33\x99\x41\xef\x4b\xc3\x75\xc1\xbd\xeb\x00\x80\x29\xa1\x54\x18\x20\x15\xe1\xd2\x13\x6b\x3c\xd3\x1a\x01\xcd\x3c\x15\x49\x6c\xb8\xce\x3b\x5d\x97\x4d\x95\xef\xf7\xa6\x74\x87\xf7\x47\xa4\xe8\x58\x5b\x2e\x73\x6d\x21\xc3\x25\x65\xd2\x5b\xa6\xc7\x1f\x62\x15\x45\x17\xd8\x57\x42\x50\x2c\xf3\x8b\xe4\x04\xef\xdb\xf2\xff\xe1\x5a\x57\x8c\xef\x9e\xf0\x17\x9e\x70\x27\x8f\xc3\x2b\xa8\xe2\xf0\x45\xd1\x49\x55\x72\x5f\x74\xa6\x3d\x5e\xf3\xaf\xf8\xf3\xf8\xe1\xf1\x6c\xdf\x36\xbf\xb8\xce\x77\xe6\x27\x5b\x53\x31\xa6\xe1\x3c\x8c\xe5\x3b\x0b\xee\x97\xc9\x78\xfc\x0f\xa1\x77\x9b\xa6\x33\x76\x5b\xbd\x8d\xe2\x56\xd4\x73\xd1\xb1\x85\xa4\xd5\x75\xe5\x69\xde\x72\x57\x99\xbe\x37\x4d\xdd\xe3\x5b\x96\xc4\xd3\x37\xf3\x8a\xad\x2e\xb5\xd5\xa7\xa1\x73\x9b\xa2\x08\xe7\x73\x12\xe7\xd3\xe5\x07\xd7\xbd\xd5\x55\xeb\x00\x53\x9a\x25\x82\xa0\xd2\xe0\x20\x4c\xe2\x6b\xba\x0e\x30\x4b\x04\xc8\xf3\x17\x10\xc9\x0f\x07\xa0\x15\xf9\x4a\x12\x52\x91\xf8\x14\x28\x41\xef\x16\xba\x77\xd7\x74\xee\x0e\x06\x6e\x1b\x1d\x34\xaf\xf5\x07\x74\x3a\x10\x49\x7a\xee\xe5\xc5\xeb\xd3\x9f\x00\x00\x00\xff\xff\x74\x06\xba\x10\x3a\x03\x00\x00")

func sql0010_audienceSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0010_audienceSql,
		"sql/0010_audience.sql",
	)
}

func sql0010_audienceSql() (*asset, error) {
	bytes, err := sql0010_audienceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0010_audience.sql", size: 826, mode: os.FileMode(511), modTime: time.Unix(1606941980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0020_applicationSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x5f\x6f\x9b\x3e\x14\x7d\xe7\x53\x5c\xf5\x25\x44\xbf\x46\xea\xaf\xad\xfa\xd2\x27\x0a\x4e\xcb\x96\x00\x75\xec\x2d\xd5\x34\x59\x1e\xbe\x6d\xac\x05\x83\x6c\x67\xd9\xf6\xe9\x27\x20\x4d\x48\xf2\x36\xed\x0d\xd9\xe7\x9c\xfb\xe7\x1c\x3c\x99\xc0\x7f\x95\x7e\xb3\xd2\x23\xf0\x26\x98\x4c\x60\xf1\x3c\x03\x6d\xc0\x61\xe9\x75\x6d\x60\xc4\x9b\x11\x68\x07\xf8\x13\xcb\x8d\x47\x05\xdb\x15\x1a\xf0\x2b\xed\xa0\xe7\xb5\x20\xed\x40\x36\xcd\x5a\xa3\x0a\x62\x4a\x22\x46\x80\xbd\x14\x04\xa2\xa2\x98\xa5\x71\xc4\xd2\x3c\x13\xdd\x81\x74\x40\x32\x3e\x87\x70\xb4\xc5\x6f\xa3\x4b\x18\x19\xe9\xf5\x0f\x6c\xbf\x2a\x59\xae\xb4\xc1\xd1\xf8\xfe\x48\xe2\x91\x46\x19\x3b\x25\xcb\x8d\x5f\xd5\x56\xff\xee\x8a\x8b\xb2\x56\x9d\x82\xc5\x57\x8b\x6e\x25\x7c\xfd\x1d\x4d\x7b\x50\xae\x35\x1a\x2f\x4a\x8b\x0a\x8d\xd7\x72\xed\x5a\xf5\xbd\x7c\xf4\x30\x23\x90\x4e\x21\xcb\x19\x90\x65\xba\x60\x8b\x7e\x88\xb2\x93\x75\x61\x00\x00\xa0\x15\x70\x9e\x26\x50\xd0\x74\x1e\xd1\x17\xf8\x48\x5e\x20\x21\xd3\x88\xcf\x18\xbc\xa1\x11\x56\x1a\x55\x57\x62\xb3\xd1\x2a\x1c\x5f\x76\x94\xd2\xa2\xf4\xa8\x84\xf4\xc0\xd2\x39\x59\xb0\x68\x5e\x74\x45\x32\x3e\x9b\xed\xc9\x31\xa7\x94\xb4\xa3\xbd\x43\x7a\xf2\xa6\x51\x7f\x4f\x36\xb2\x42\xf8\x14\xd1\xf8\x29\xa2\xe1\xdd\xed\xf8\x40\xe4\x59\xfa\xcc\x49\x8f\x52\xe8\x4a\xab\x9b\xce\xb8\x77\xf0\xff\x57\xd7\xb7\xbb\xf6\xfd\xaf\x06\xcf\x9d\x3b\x6b\xa1\x77\xb0\x1f\xb8\xdf\xb3\x56\x7b\xb9\x9b\xeb\x43\xed\x23\x8c\xc3\xd2\xa2\x07\x46\x96\xec\x04\xd0\xb9\x26\xd6\xfa\x15\xbd\xae\x10\xd2\x8c\x9d\xd5\x0c\x6f\xee\xae\xae\x76\x5d\x36\x68\x2b\xed\x5c\x6b\x14\x7c\x58\xe4\xd9\xc3\x89\x9c\x5c\xaf\xeb\x2d\x2a\xf1\x66\xa5\xf1\x6e\x10\xa3\x2f\x5f\x4f\x91\xbb\x30\xa1\x12\x1b\xab\x77\x6a\xfd\x55\x85\x5e\x2a\xe9\xe5\xf0\xac\xdf\x64\xb8\x9f\xf9\xf2\x78\xb4\x71\x30\x88\x58\x9a\x25\x64\x39\x0c\x95\x38\xac\x2a\xcf\x8e\xd3\xb6\xbf\x19\x46\x94\xa6\x8f\x8f\x84\xee\x42\x21\xda\xc5\x38\x2f\xab\x26\x00\x78\x20\xd3\x9c\x12\xe0\x45\xd2\x02\x4f\xc4\x02\x80\x69\x4e\x81\x44\xf1\x13\xd0\xfc\x73\x00\x40\x96\x24\xe6\x8c\x40\x41\xf3\x98\x24\x9c\x92\x33\xcd\xf0\xe2\x10\xbd\x8b\xb6\x87\xe1\xcb\x90\xd4\x5b\xf3\x0f\xde\x86\x84\xe6\xc5\xee\xbf\x1b\xb6\x7b\xff\x27\x00\x00\xff\xff\x3c\x4a\xe9\x5a\x85\x04\x00\x00")

func sql0020_applicationSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0020_applicationSql,
		"sql/0020_application.sql",
	)
}

func sql0020_applicationSql() (*asset, error) {
	bytes, err := sql0020_applicationSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0020_application.sql", size: 1157, mode: os.FileMode(511), modTime: time.Unix(1606941986, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0030_userSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcd\x6e\xdb\x30\x10\x84\xef\x7a\x8a\x41\x2e\xb1\xd1\xf8\xd0\xa2\x28\x0a\xe4\x24\x4b\xeb\x44\xad\x2c\x29\x14\xd9\x26\x27\x81\x30\xb7\x36\x01\xeb\x07\x24\x05\xe7\xf1\x0b\x5b\x86\x13\xa3\xb7\x22\xd7\xe1\x7c\xc3\xc5\xee\x2c\x16\xf8\xd4\xda\xad\xd3\x81\xa1\x86\x68\xb1\x40\xfd\x94\xc3\x76\xf0\xbc\x09\xb6\xef\x70\xab\x86\x5b\x58\x0f\x7e\xe5\xcd\x18\xd8\xe0\xb0\xe3\x0e\x61\x67\x3d\x26\xee\x68\xb2\x1e\x7a\x18\xf6\x96\x4d\x94\x08\x8a\x25\x41\xc6\xcb\x9c\x90\xad\x50\x94\x12\xf4\x9c\xd5\xb2\xc6\xe8\xd9\xf9\x59\x04\x00\xd6\x40\xa9\x2c\x45\x25\xb2\x75\x2c\x5e\xf0\x93\x5e\x90\xd2\x2a\x56\xb9\xc4\x96\xbb\xc6\xe9\xce\xf4\x6d\x33\x8e\xd6\xcc\xe6\x77\x27\x64\xe3\x58\x07\x36\x8d\x0e\x90\xd9\x9a\x6a\x19\xaf\xab\x53\x7a\xa1\xf2\xfc\x02\x27\x4a\x08\x2a\x64\x73\xb1\x4c\xf0\x38\x98\xff\x87\xf7\xfd\xd6\x76\xf8\x15\x8b\xe4\x31\x16\xb3\xcf\x5f\xbe\xcf\xdf\x50\x55\x64\x4f\x8a\x26\xdf\xa0\xbd\x3f\xf4\xce\x34\x3b\xed\x77\x38\x99\xbf\x7d\x9d\xdf\x1d\x9f\xae\xdf\xf9\x75\xb0\x8e\xfd\xd5\x34\xe7\x08\xd7\xff\xb1\x7b\xc6\x8f\xba\x2c\x96\x67\x89\x5d\x6b\xbd\xb7\x7d\xe7\xdf\xcb\xae\xdf\xf3\x95\xd0\x72\xd0\x46\x07\x3d\x69\xd1\xfc\x3e\xba\xdc\x42\x64\x0f\x0f\x24\xce\x4b\x68\x82\x6d\xd9\x07\xdd\x0e\x11\xb0\xa4\x55\x29\x08\xaa\x4a\x8f\xc6\xb2\x98\x6e\x14\x01\xab\x52\x80\xe2\xe4\x11\xa2\xfc\x1d\x01\xf4\x4c\x89\x92\x84\x4a\x94\x09\xa5\x4a\xd0\x3f\x61\xb3\x9b\xb7\x1d\xdf\x1c\x3f\x7f\xdf\xac\xb4\x3f\x74\x1f\xd0\xad\x54\x94\xd5\xb9\x59\xa7\x39\xef\xa3\xbf\x01\x00\x00\xff\xff\x70\x08\x4f\xec\xbf\x02\x00\x00")

func sql0030_userSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0030_userSql,
		"sql/0030_user.sql",
	)
}

func sql0030_userSql() (*asset, error) {
	bytes, err := sql0030_userSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0030_user.sql", size: 703, mode: os.FileMode(511), modTime: time.Unix(1606941992, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0100_optionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x4e\x83\x40\x10\x86\xef\xfb\x14\xff\xad\x10\xcb\xc5\x44\x2f\x3d\x51\xd8\x46\x14\xa1\x2e\xac\xb1\x27\xb3\x61\x27\x76\x92\x76\xd9\xb8\x60\x7d\x7c\x53\x68\x9a\x3e\x80\xd7\xdd\xef\x9b\xc9\x7c\x49\x82\xbb\x23\x7f\x7d\x9b\x81\xa0\xbd\x48\x12\x34\x6f\x25\xd8\x21\x50\x37\x70\xef\xb0\xd0\x7e\x01\x0e\xa0\x5f\xea\xc6\x81\x2c\x4e\x7b\x72\x18\xf6\x1c\x30\x7b\x67\x88\x03\x8c\xf7\x07\x26\x2b\x32\x25\xd3\x56\xa2\x4d\xd7\xa5\x44\xb1\x41\x55\xb7\x90\x1f\x45\xd3\x36\xe8\xfd\x19\x0e\x91\x00\x00\x33\x5a\x26\xd7\xd1\x27\x5b\x68\x5d\xe4\x13\x58\xe9\xb2\x84\x92\x1b\xa9\x64\x95\xc9\xe6\x0a\x85\x88\x6d\xbc\x9c\x3c\x67\x8e\x84\xf7\x54\x65\x4f\xa9\x8a\xee\x1f\x1e\xe3\xab\x38\xff\xff\x98\xc3\x48\x78\x6e\xea\x6a\x3d\x3f\x6c\x55\xf1\x9a\xaa\x1d\x5e\xe4\x2e\xba\x59\xba\x9c\x26\xc5\x22\x5e\x09\x71\x1b\x21\xef\x4f\xee\x1f\x32\xe4\xaa\xde\x5e\x22\x5c\xce\x5e\xfd\x05\x00\x00\xff\xff\x65\x9c\x9f\x7a\x6b\x01\x00\x00")

func sql0100_optionSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0100_optionSql,
		"sql/0100_option.sql",
	)
}

func sql0100_optionSql() (*asset, error) {
	bytes, err := sql0100_optionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0100_option.sql", size: 363, mode: os.FileMode(511), modTime: time.Unix(1606867276, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/0000_initialize.sql": sql0000_initializeSql,
	"sql/0010_audience.sql": sql0010_audienceSql,
	"sql/0020_application.sql": sql0020_applicationSql,
	"sql/0030_user.sql": sql0030_userSql,
	"sql/0100_option.sql": sql0100_optionSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"0000_initialize.sql": &bintree{sql0000_initializeSql, map[string]*bintree{}},
		"0010_audience.sql": &bintree{sql0010_audienceSql, map[string]*bintree{}},
		"0020_application.sql": &bintree{sql0020_applicationSql, map[string]*bintree{}},
		"0030_user.sql": &bintree{sql0030_userSql, map[string]*bintree{}},
		"0100_option.sql": &bintree{sql0100_optionSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

