// Code generated by go-bindata.
// sources:
// sql/0000_initialize.sql
// sql/0010_audience.sql
// sql/0020_application.sql
// sql/0030_user.sql
// sql/0100_option.sql
// sql/0200_request_token.sql
// sql/0220_access_token.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sql0000_initializeSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xc1\x6e\xdb\x38\x14\x3c\x9b\x5f\x31\xf0\x1a\x90\x85\x58\x45\x7b\xdc\x18\x39\x38\x0e\xe3\x1a\x70\xe4\x5d\x49\xde\x04\xa8\x5b\x83\x2b\xbd\x58\x04\x24\x4a\x25\xa9\x24\x5e\xf4\xe3\x17\x94\xa2\x8d\x93\x26\x6d\x0f\x7b\xb1\x6c\xbe\xd1\x7b\x33\x43\x72\x1c\x04\x38\x29\xe5\x5e\x0b\x4b\xd8\xd4\x2c\x08\x10\xff\xb9\x82\x54\x30\x94\x5a\x59\x29\x78\x9b\xda\x83\x34\xa0\x07\x4a\x1b\x4b\x19\xee\x73\x52\xb0\xb9\x34\xe8\xde\x73\x20\x69\x20\xea\xba\x90\x94\xb1\x79\xc4\x67\x09\x47\x3c\xff\xc8\xaf\x66\x58\x5e\x22\x5c\x27\xe0\x37\xcb\x38\x89\x91\x4b\x5d\x4d\x7b\x04\xbf\x49\x78\x18\x2f\xd7\xe1\x0b\xd0\xb0\xde\xa7\xfa\x50\xdb\x6a\xf8\x73\x68\xa3\x44\x9a\x92\xb2\xbf\x00\xcd\x8d\xad\x34\x0d\xa7\x8c\x1d\x4b\x8e\xad\xb0\x54\x92\xb2\xe7\xb4\x97\xaa\x6f\xb2\x8e\x10\xf1\x3f\x56\xb3\x39\xc7\xe5\x26\x9c\x27\xae\x5d\x53\x67\xc2\xd2\xce\xca\x92\x8c\x15\x65\x3d\xf6\x59\xc4\x93\x4d\x14\xc6\x48\xa2\xe5\x62\xc1\x23\xcc\x62\x8c\x46\xec\x82\xcf\x57\xb3\x88\x33\x00\x48\xab\x02\x09\xbf\x49\x70\x7a\x86\xaf\x4d\x65\x69\x27\x33\x52\x76\x9c\x2c\x76\xb3\x68\xf1\xd7\xa7\xf7\x9f\xfd\x29\x3b\xe7\x8b\x65\xd8\xc2\x43\x7e\xed\x90\xee\xf1\xdb\x19\x3a\xc6\xe3\xb4\x2a\x26\x08\xd7\xd7\x63\xff\xf4\xd4\xd2\x83\xf5\xa7\x0c\xe8\x46\x3b\xe4\x94\xf1\xf0\x62\xca\x46\x23\xac\x66\xe1\x62\x33\x5b\x70\xd4\x45\xbd\x37\x5f\x8b\x29\xfb\x91\x1e\x53\x34\x7b\x79\x7b\x18\x0f\xef\x44\xd1\xd0\xb0\xa5\x79\x24\xc9\x91\xee\xf4\x00\x41\x00\x4d\x65\x75\x47\x06\x9d\xdd\x06\xe3\x4c\x8a\x54\x4b\x2b\x53\x18\xb9\x57\xc6\xc7\xad\xae\x4a\x08\xec\xe5\x1d\x29\x18\xab\xa5\xda\x23\x08\x18\x70\xbd\x4c\x3e\x3e\xed\x14\x65\x43\xd7\x77\xdc\xea\x8d\xf9\x8a\xcf\x13\xf4\xb5\x9e\x8b\xef\x10\x8f\xdf\x19\xe0\x4f\x3a\x0e\x45\x75\x4f\x3a\x15\x86\x0c\x6c\x4e\x8f\x33\x18\x30\xfc\xaf\xf0\x7d\xeb\xb6\xf4\x46\x5f\xe0\x32\x5a\x5f\x3d\xa3\x76\x34\x4d\x53\x5d\x88\xd4\x49\x56\x07\x9b\x3b\x35\x36\x17\xd6\x33\x50\x95\x85\x40\x41\xd6\x92\x9e\x40\x35\xe5\xdf\xee\x39\x0c\x86\x13\x54\x1a\x8d\xca\x48\x9b\xd4\x6d\x9c\xb7\xf3\x7c\xdc\x4b\x9b\xbb\xa2\xe3\x99\x1f\xea\x9c\x94\x78\xd5\x03\x4d\x7b\x7a\xa8\x77\x8f\x53\x7b\xc6\x13\x78\x9f\xbe\x88\xe0\x9f\xf7\xc1\xef\xdb\xed\x2e\xf8\x7c\xe2\x4d\xe0\x05\xee\x63\x2f\xbd\x37\xe4\x3c\xb9\x71\xa4\xc6\x6a\x59\x1a\xc7\x03\xf2\xd6\xb9\x77\x00\x3d\x48\x63\x51\xa9\xd6\xcb\x9c\x44\xe6\xd8\x5b\x21\x0b\x54\xb7\x2f\xfc\x75\x2f\x97\xbf\x40\xfa\x4d\x0d\xc1\x76\x7b\x32\x72\xac\x3d\x7f\x02\xef\xcb\x76\x1b\x74\x3f\x5e\x17\x70\x64\x93\x53\x70\x3c\xb0\x3f\xac\x1d\xb0\xe7\xf5\xfc\xf4\xbb\xfc\x8a\x93\x68\x39\x4f\xb0\xbc\xba\xda\x24\xb3\xf3\x15\xef\x6e\x7d\xaa\x49\x58\xb7\xa3\xed\xe1\xef\x4e\x6c\xab\x54\xa7\xed\x4d\x95\xca\x56\xed\x42\x66\xac\x5b\x68\x4a\x85\xc6\x74\x5b\x4f\x30\x35\xa5\xf2\x56\x52\x06\x43\xb5\xd0\xc2\x56\xba\xbf\x5f\x4f\x97\x8a\xec\xce\xf5\xde\xb9\xde\xbb\xb4\x2a\xc6\x3e\xc3\x8b\x98\x60\x2f\x63\xc2\x8d\xff\x69\x48\x60\xe0\x48\xfd\x10\xf7\xa1\xc3\xb5\xda\x1c\xae\x4f\x96\x01\xbf\xe1\xf3\x4d\xc2\xe1\x3d\xba\x38\xfa\xf0\xce\xc3\xb7\x6f\xed\x60\x36\xd8\xc4\xcb\x70\xe1\x92\x84\x0d\x96\x61\xb2\x76\xab\x53\x30\xb0\xae\xd1\xe9\x19\x34\xa9\xea\x5d\x1f\x17\x46\xa7\xfe\x94\x0d\xd8\xe0\xd5\xac\xca\x8c\x9d\xb4\xe6\x3a\x26\xdf\xc7\xd4\x1b\x29\xf5\x6a\x20\x73\x95\x3d\xaf\x5c\x54\xf7\xea\x7f\xf8\x7f\xfa\x37\x00\x00\xff\xff\xe2\x21\x9d\x12\xf1\x06\x00\x00")

func sql0000_initializeSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0000_initializeSql,
		"sql/0000_initialize.sql",
	)
}

func sql0000_initializeSql() (*asset, error) {
	bytes, err := sql0000_initializeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0000_initialize.sql", size: 1777, mode: os.FileMode(493), modTime: time.Unix(1607209419, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0010_audienceSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcd\x6e\xdb\x30\x10\x84\xef\x7a\x8a\x41\x2e\x96\xd1\xb8\x68\x83\x34\x97\x9c\x18\x69\x6d\xab\x91\x45\x85\x22\x5b\xbb\x17\x81\x30\x89\x98\x68\xf5\x03\x89\x46\xfa\xf8\x85\x65\xc7\x3f\x0d\x7a\x28\xda\x9b\xa0\x9d\x8f\x9c\x9d\x01\x27\x13\xbc\xab\xdc\x73\xa7\xbd\x85\x6a\x83\xc9\x04\xc5\x53\x0a\x57\xa3\xb7\x6b\xef\x9a\x1a\x23\xd5\x8e\xe0\x7a\xd8\x9f\x76\xbd\xf5\xd6\xe0\x65\x63\x6b\xf8\x8d\xeb\xb1\xe7\x76\x22\xd7\x43\xb7\xed\x0f\x67\x4d\x10\x44\x82\x98\x24\xc8\x55\x4e\x90\xfc\x91\xb2\x92\xa5\x33\x2e\x12\x39\x5f\x80\x15\xa0\x4c\x2d\x10\x8e\xe6\xc5\xcd\xa7\xbb\xd1\x35\x46\x62\xf8\x18\xdf\x9f\x40\xf6\x90\x12\x92\x29\x32\x2e\x41\xcb\xa4\x90\x05\x36\xae\x6b\xde\xeb\xad\x71\xb6\x5e\xdb\x3e\x0c\x00\xc0\x19\x28\x95\xc4\xc8\x45\xb2\x60\x62\x85\x47\x5a\x21\xa6\x29\x53\xa9\xc4\xb3\xad\xcb\x4e\xd7\xa6\xa9\xca\xed\xd6\x99\x70\x7c\x3d\x20\xeb\xce\x6a\x6f\x4d\xa9\x3d\x64\xb2\xa0\x42\xb2\x45\x2e\xbf\x0d\x17\x65\x2a\x4d\x8f\x78\xa4\x84\xa0\x4c\x96\x47\xd1\x1e\xdf\xb6\xe6\x5f\xf0\x5a\x57\x16\x5f\x98\x88\xe6\x4c\x84\x77\xb7\xe3\x13\xa8\xb2\xe4\x49\xd1\x5e\x65\x6c\xbf\xee\x5c\x3b\xc4\xfa\x2a\xfe\xf8\xe1\xe6\xf6\xb0\x82\x6f\xbe\xdb\x1a\x9f\x0b\x9e\x3d\x1c\xf9\xfd\xa4\xb2\x5e\x1b\xed\xf5\x7e\x18\xfc\x4d\xa2\x65\x6b\xbb\xca\xf5\xbd\x6b\xea\x21\xdc\xe3\xff\xd7\x8c\x8f\x4e\x05\x4d\x49\x50\x16\xd1\x9b\x4e\x9c\x19\x83\x67\x88\x29\x25\x49\x88\x58\x11\xb1\x78\x58\xe9\x74\x36\x24\x2d\xe5\x85\xeb\xb3\xee\xc2\xb3\x4b\xaf\xcf\xa0\xf1\xc5\x26\x22\x99\xcd\x48\x1c\x9a\x28\xbd\xab\x6c\xef\x75\xd5\x06\xc0\x03\x4d\xb9\x20\xa8\x3c\xde\x09\x79\xf6\x9b\xbf\x00\x98\x72\x01\x62\xd1\x1c\x82\x7f\x0d\x00\x5a\x52\xa4\x24\x21\x17\x3c\xa2\x58\x09\x7a\x73\x6a\x78\x75\x6a\xfc\x6a\xe7\xe2\xfc\xb1\xc4\xcd\x4b\xfd\x1f\x9e\x4b\x2c\x78\x7e\x28\xe8\xd2\xf0\xfd\x1f\x47\xe7\x6d\xdd\xff\x0a\x00\x00\xff\xff\xc8\x27\xdb\x8f\xc0\x03\x00\x00")

func sql0010_audienceSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0010_audienceSql,
		"sql/0010_audience.sql",
	)
}

func sql0010_audienceSql() (*asset, error) {
	bytes, err := sql0010_audienceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0010_audience.sql", size: 960, mode: os.FileMode(493), modTime: time.Unix(1607739540, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0020_applicationSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x4d\x6f\x9b\x40\x10\xbd\xf3\x2b\x46\xb9\x80\x55\xbb\x6a\xab\xa8\x97\x9c\x08\x8c\x1d\x5a\x1b\x9c\x05\x5a\xa7\x17\xb4\x65\xa7\xf1\x2a\xe1\x43\xbb\x6b\xb9\xe9\xaf\xaf\x00\x13\x63\xd9\xb1\x1a\xb5\xea\x0d\x76\xe7\xe3\xcd\x7b\x6f\x67\x32\x81\x37\x85\xbc\x57\xdc\x10\xa4\xb5\x35\x99\x40\x7c\x3b\x07\x59\x82\xa6\xdc\xc8\xaa\x04\x3b\xad\x6d\x90\x1a\xe8\x27\xe5\x1b\x43\x02\xb6\x6b\x2a\xc1\xac\xa5\x86\x2e\xaf\x09\x92\x1a\x78\x5d\x3f\x4a\x12\x96\xc7\xd0\x4d\x10\x92\xbb\x25\xc2\x8c\xb9\x61\x92\xb5\x9f\x6e\x0c\x18\xa6\x0b\x70\x6c\xbe\x31\xeb\x4a\xc9\x5f\x6d\x66\x96\x57\x82\xec\x31\xd8\xf9\xa3\xa4\xd2\x64\xb9\x22\x41\xa5\x91\xfc\x51\x37\xa7\x35\xd7\x7a\x5b\x29\xd1\x7c\x2b\xfa\xa1\x48\xaf\x33\x53\x3d\x50\x69\x8f\xae\xac\xe7\x56\xee\xf5\x1c\x21\x98\x42\x18\x25\x80\xab\x20\x4e\x62\x58\x4b\x55\xbd\x6d\x21\xe5\x6d\x1f\xed\x58\x00\x00\x52\x40\x9a\x06\x3e\x2c\x59\xb0\x70\xd9\x1d\x7c\xc6\x3b\xf0\x71\xea\xa6\xf3\x04\xee\xa9\xcc\x14\x2f\x45\x55\x64\x9b\x8d\x14\xce\x68\xdc\xa6\xe4\x8a\xb8\x21\x91\x71\x03\x49\xb0\xc0\x38\x71\x17\xcb\xe4\x5b\xdb\x2b\x4c\xe7\xf3\xe7\x74\x2f\x65\x0c\x9b\x69\xfb\xa0\x2e\x7d\x53\x8b\xbf\x49\x2f\x79\x41\xf0\xc5\x65\xde\x8d\xcb\x9c\x8f\x97\xa3\x7d\x62\x1a\x06\xb7\x29\x76\x51\x82\x74\xae\x64\xdd\x4a\xd1\x07\xbf\x7f\xf7\xe1\x72\x37\x82\x79\xaa\x09\x12\x5c\x25\xc7\x6d\xed\x2d\x7d\xb7\xbb\x28\x4d\xb9\x22\x93\x3d\xd0\x53\x1b\xbb\x83\xaf\xa4\x86\x4f\x71\x14\x5e\x77\xff\x05\x19\x2e\xb8\xe1\xdd\x99\x35\x50\x21\x08\x7d\x5c\xc1\x80\xf2\xa1\x96\x10\x85\x27\x24\x91\x62\x3c\xe8\xfa\x4a\x45\xb3\x9a\x54\x21\xb5\xee\xc5\x1d\x5e\xf5\x32\x3f\x8f\xcb\x70\x8a\x0c\x43\x0f\x4f\x39\x43\x8a\x51\x83\xcf\xc7\x39\x26\x08\x9e\x1b\x7b\xae\xdf\x12\xcb\x37\x42\x52\x99\xd3\x51\xbd\xe6\x72\xdf\xfe\x90\xda\xe6\x6e\x1a\x31\x0c\x66\x61\x63\x2f\x67\x50\x64\x3c\x48\x1a\x41\xcb\xe7\x11\xb0\x3e\x7a\x38\xdd\xf9\x12\x47\xd0\xfb\xd3\x74\xe9\xbb\x87\x03\x0d\x6c\xef\x1c\xf2\x35\x86\x97\x9a\x58\xaf\xd5\xe5\x5e\xf1\xd2\xfc\x77\x49\x5e\x64\xf2\x4c\xb1\x16\x69\xd6\xbe\x8e\xc1\xa6\x1a\x0a\xf9\xc7\x84\xed\x4b\x1d\x12\xc6\x82\xd9\x0c\xd9\x6e\x0b\x64\x46\x16\xa4\x0d\x2f\x6a\x0b\xe0\x1a\x1b\x97\xf4\x22\x9d\x7a\x1f\x9d\x91\x00\x5d\xef\x06\x58\xf4\xd5\x02\xc0\x15\x7a\x69\x82\xb0\x64\x91\x87\x7e\xca\xf0\xa8\xb0\x73\xb1\x5f\x38\x17\x0d\x90\xe1\x7e\xf7\xab\x6d\xf9\x0f\x36\xbc\xcf\xa2\xe5\xce\x0a\x47\x98\xaf\xce\xdd\x0e\x4d\x7d\x3e\xb0\xf3\xd0\xd5\xef\x00\x00\x00\xff\xff\xcd\x62\x7c\x34\x9d\x06\x00\x00")

func sql0020_applicationSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0020_applicationSql,
		"sql/0020_application.sql",
	)
}

func sql0020_applicationSql() (*asset, error) {
	bytes, err := sql0020_applicationSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0020_application.sql", size: 1693, mode: os.FileMode(493), modTime: time.Unix(1607739544, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0030_userSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x5d\x8f\x9b\x30\x10\x7c\xe7\x57\x8c\xee\xe5\x40\x4d\x2a\xb5\xaa\xaa\x4a\xf7\x44\x60\x93\xa3\x25\x90\x33\x76\x9b\xeb\x0b\xb2\x82\x9b\x58\x0a\x1f\xc2\xa0\xdc\xcf\xaf\x80\x7c\x90\x4b\x5b\x55\x6a\x5f\x77\x77\xc6\x33\xb3\xeb\xe9\x14\x6f\x72\xbd\xad\x65\xa3\x20\x2a\x6b\x3a\x45\xf2\x14\x42\x17\x30\x6a\xd3\xe8\xb2\xc0\xbd\xa8\xee\xa1\x0d\xd4\x8b\xda\xb4\x8d\xca\x70\xd8\xa9\x02\xcd\x4e\x1b\x0c\xb8\x6e\x48\x1b\xc8\xaa\xda\x6b\x95\x59\x1e\x23\x97\x13\xb8\x3b\x0b\x09\xc1\x1c\x51\xcc\x41\xeb\x20\xe1\x09\x76\xba\x2e\xdf\xb6\x46\xd5\xc6\xb6\x00\x40\x67\x10\x22\xf0\xb1\x62\xc1\xd2\x65\xcf\xf8\x42\xcf\xf0\x69\xee\x8a\x90\x63\xab\x8a\xb4\x96\x45\x56\xe6\x69\xdb\xea\xcc\x76\x26\x3d\x64\x53\x2b\xd9\xa8\x2c\x95\x0d\x78\xb0\xa4\x84\xbb\xcb\x15\xff\xde\x3f\x12\x89\x30\x3c\xc3\x3d\xc1\x18\x45\x3c\x3d\x0f\x0d\xf0\xb6\xca\xfe\x05\xbe\x2f\xb7\xba\xc0\x57\x97\x79\x8f\x2e\xb3\xdf\xbd\xff\xe4\x5c\xa0\x22\x0a\x9e\x04\x0d\x73\x95\x34\xe6\x50\xd6\x59\xba\x93\x66\x87\x7e\xf8\xe3\x07\x67\xd2\xb5\xae\xfb\xea\xa5\xd2\xb5\x32\xaf\xf4\x1c\x49\xea\xf2\x87\xde\x2b\x7c\x4e\xe2\x68\x36\x94\x72\xd5\xc8\x4c\x36\x72\xa8\x59\xce\x83\xf5\x57\x71\xa7\x95\xaa\x73\x6d\x8c\x2e\x8b\x3e\xf9\xbe\x76\x0a\xff\x6c\x80\xd1\x9c\x18\x45\x1e\x5d\x2d\x4a\x67\x0e\xe2\x08\x3e\x85\xc4\x09\x9e\x9b\x78\xae\xdf\xbb\x94\x6d\xa6\x55\xb1\x51\x37\x44\x5d\xf3\xf2\x20\x38\xad\xf9\x55\x6f\x1e\x33\x0a\x16\x51\xb7\x6d\x7b\x44\x32\x19\x81\x9c\x21\xa6\xd7\x8a\xce\xd3\x63\x3f\x7f\xa6\xb8\x91\x7e\xaa\x8a\x95\xef\x5e\x1b\x1a\x5d\xa1\x7d\x4c\x68\x82\xdf\xb1\x5f\x65\xcf\x82\xc5\x82\xd8\xf1\xb8\xd2\x46\xe7\xca\x34\x32\xaf\x2c\x60\x46\x9d\xdb\xd3\x63\x71\x34\x4a\x76\x48\x02\xe4\x7a\x8f\x60\xf1\x37\x0b\xa0\x35\x79\x82\x13\x56\x2c\xf6\xc8\x17\x8c\x6e\x18\xed\xbb\xcb\x01\xdf\x75\x0a\xc6\xbf\xd7\x2f\x0f\xc5\x7f\xf8\xbf\x3e\x8b\x57\xc7\x73\xba\x88\x7d\xf8\x65\x79\xbc\x87\x07\xeb\x67\x00\x00\x00\xff\xff\x8a\x59\x93\x7d\x4a\x04\x00\x00")

func sql0030_userSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0030_userSql,
		"sql/0030_user.sql",
	)
}

func sql0030_userSql() (*asset, error) {
	bytes, err := sql0030_userSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0030_user.sql", size: 1098, mode: os.FileMode(493), modTime: time.Unix(1607739551, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0100_optionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x4e\x83\x40\x10\x86\xef\xfb\x14\xff\xad\x10\x8b\x07\x13\xbd\xf4\x44\xcb\x36\xa2\x08\x75\x01\x63\x4f\x66\xc3\x4e\x64\x92\x76\xd9\x74\xc1\xfa\xf8\xa6\x50\x0d\x0f\xe0\x75\xe6\xfb\x66\x92\x2f\x8a\x70\x73\xe4\xcf\x93\xee\x09\xb5\x13\x51\x84\xf2\x35\x03\x5b\x78\x6a\x7a\xee\x2c\x16\xb5\x5b\x80\x3d\xe8\x9b\x9a\xa1\x27\x83\x73\x4b\x16\x7d\xcb\x1e\x93\x77\x81\xd8\x43\x3b\x77\x60\x32\x62\xa3\x64\x5c\x49\x54\xf1\x3a\x93\x48\xb7\xc8\x8b\x0a\xf2\x3d\x2d\xab\x12\x2d\x9f\xba\xdb\xce\x5d\x0c\x1f\x08\x00\xd0\x83\x61\xb2\x0d\x7d\xb0\x41\x5d\xa7\xc9\x48\xe7\x75\x96\x41\xc9\xad\x54\x32\xdf\xc8\xab\xf6\x4b\xfa\x80\x4d\xb8\x1c\x65\xab\x8f\x84\xb7\x58\x6d\x1e\x63\x15\xdc\xdd\x3f\x84\x7f\xf6\xb4\xff\xd2\x87\x81\xf0\x54\x16\xf9\x7a\x1a\xec\x54\xfa\x12\xab\x3d\x9e\xe5\x3e\x98\x7d\x5e\x8e\x97\x42\x11\xae\x84\x98\xe7\x48\xba\xb3\xfd\x87\x20\x89\x2a\x76\xd7\x1c\xf3\x00\xab\x9f\x00\x00\x00\xff\xff\x8b\x95\xf3\x30\x7a\x01\x00\x00")

func sql0100_optionSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0100_optionSql,
		"sql/0100_option.sql",
	)
}

func sql0100_optionSql() (*asset, error) {
	bytes, err := sql0100_optionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0100_option.sql", size: 378, mode: os.FileMode(493), modTime: time.Unix(1607702932, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0200_request_tokenSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xcb\x8e\xd3\x30\x14\xdd\xe7\x2b\xce\xae\xad\xa0\x2c\x10\xb0\x99\x55\x26\xb9\x85\x40\x9a\x14\xc7\x91\x66\xd8\x58\x51\x7c\xd5\x58\xb4\x4e\xb0\x1d\xcd\x7c\x3e\x4a\x5f\x0c\xa2\x65\x35\x4b\xfb\x3c\xee\xeb\x2c\x97\x78\xb3\x37\x5b\xd7\x04\x46\x3d\x44\xcb\x25\xaa\xef\x39\x8c\x85\xe7\x36\x98\xde\x62\x56\x0f\x33\x18\x0f\x7e\xe6\x76\x0c\xac\xf1\xd4\xb1\x45\xe8\x8c\xc7\x51\x37\x91\x8c\x47\x33\x0c\x3b\xc3\x3a\x4a\x04\xc5\x92\x20\xe3\xfb\x9c\x90\xad\x50\x94\x12\xf4\x90\x55\xb2\x42\x67\x5c\xff\xce\xf1\xaf\x91\x7d\x50\xa1\xff\xc9\xd6\xcf\x23\x00\x30\x1a\x75\x9d\xa5\xd8\x88\x6c\x1d\x8b\x47\x7c\xa3\x47\xa4\xb4\x8a\xeb\x5c\x62\xcb\x56\xb9\xc6\xea\x7e\xaf\xc6\xd1\xe8\xf9\xe2\xed\x41\xd2\x3a\x6e\x02\x6b\xd5\x04\xc8\x6c\x4d\x95\x8c\xd7\x1b\xf9\xe3\x50\xad\xa8\xf3\xfc\x22\x4f\x6a\x21\xa8\x90\xea\x42\x3a\xca\x9b\x51\x1b\xb6\x2d\xab\x73\xe9\xb3\xf0\x04\x4f\xc3\xb4\x87\xd9\x6e\x30\x7c\xdb\x0f\x8c\xaf\x55\x59\xdc\x1f\x3f\xf8\x79\x30\x8e\xfd\xad\x86\x4e\x5d\xf7\x9a\x55\xdb\x35\xbb\x1d\xdb\x2d\x43\xd2\x83\xfc\x2f\x43\xed\x39\x74\xbd\x46\xf2\x25\x16\xf3\x0f\x8b\x7f\xc7\x9b\x55\xef\x3f\x7e\x9a\x5d\x9a\x56\xa3\x33\xd7\x5c\x1d\x6b\xe3\xb8\x0d\xb7\x70\x1f\xa6\xfb\x4f\xc0\xf1\xbd\x2a\x05\x65\x9f\x8b\xc3\x21\xe6\x2f\x76\xb5\x80\xa0\x15\x09\x2a\x12\x3a\x9d\xf3\x0c\xfa\xf9\x84\x96\x05\x52\xca\x49\x12\x92\xb8\x4a\xe2\x94\xae\xd9\xfd\xb5\xdb\x2b\x8e\x7f\xf0\x1b\xa6\xd1\xe2\x2e\x8a\x5e\x06\x37\xed\x9f\xec\x2b\x44\x37\x15\xe5\xe6\x14\xdc\x2b\x51\xbd\xfb\x1d\x00\x00\xff\xff\x63\x25\x8d\x54\x2b\x03\x00\x00")

func sql0200_request_tokenSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0200_request_tokenSql,
		"sql/0200_request_token.sql",
	)
}

func sql0200_request_tokenSql() (*asset, error) {
	bytes, err := sql0200_request_tokenSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0200_request_token.sql", size: 811, mode: os.FileMode(493), modTime: time.Unix(1607739562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0220_access_tokenSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4f\x6f\xd4\x30\x10\xc5\xef\xf9\x14\xef\xd6\xac\x60\x39\x21\x2e\x3d\xb9\xc9\x2c\x04\xb2\xc9\xe2\x38\x88\x72\x89\x2c\x67\xd4\xb5\xda\x75\xa2\x38\xa1\xfd\xf8\x28\xff\xca\xc2\xb6\x12\x07\xae\xfe\xcd\x7b\x9e\x37\x7a\xdb\x2d\xde\x9c\xec\x5d\xa7\x7b\x46\xd9\x06\xdb\x2d\x8a\xaf\x29\xac\x83\x67\xd3\xdb\xc6\xe1\xaa\x6c\xaf\x60\x3d\xf8\x89\xcd\xd0\x73\x8d\xc7\x23\x3b\xf4\x47\xeb\x31\xeb\xc6\x21\xeb\xa1\xdb\xf6\xc1\x72\x1d\x44\x92\x84\x22\x28\x71\x93\x12\x92\x1d\xb2\x5c\x81\xbe\x27\x85\x2a\x70\xb4\x5d\xf3\x4e\x1b\xc3\xde\x57\x7d\x73\xcf\xce\x87\x01\x00\xd8\x1a\x65\x99\xc4\x38\xc8\x64\x2f\xe4\x2d\xbe\xd0\x2d\x62\xda\x89\x32\x55\xb8\x63\x57\x75\xda\xd5\xcd\xa9\x1a\x06\x5b\x87\x9b\xb7\x93\xc4\x74\xac\x7b\xae\x2b\xdd\x43\x25\x7b\x2a\x94\xd8\x1f\xd4\x8f\xe9\xb3\xac\x4c\xd3\x67\x79\x54\x4a\x49\x99\xaa\x9e\x87\x66\xb9\x1e\x6a\xcb\xce\x70\xb5\x7e\xbd\x0a\x17\x3c\x66\x31\x53\xb4\x57\x26\x06\xcf\xdd\x8a\xe6\x97\x29\x50\x35\x78\xc6\x37\x21\xa3\x4f\x42\x86\x1f\xde\x2f\xcb\x7a\xd3\xb4\x8c\xcf\x45\x9e\xdd\x2c\xdb\x3f\x68\x7b\xf2\xe7\x2f\xfc\xd4\xda\x8e\xfd\x5f\x79\x66\xd6\xf1\xcf\xe6\xfe\x22\xeb\xcc\x76\xb9\xa4\xe4\x63\x36\x9d\x2c\x3c\x4b\xb5\x81\xa4\x1d\x49\xca\x22\x5a\xef\xbe\x40\x1f\x8e\x34\xcf\x10\x53\x4a\x8a\x10\x89\x22\x12\x31\xbd\x64\xf7\xc7\x15\x5e\x70\xfc\xcd\xff\xdd\x74\x39\xdc\xa5\xdb\x08\x5e\xb1\x09\x36\xd7\x41\x70\x5e\xd4\xb8\x79\x74\xff\xa1\xaa\xb1\xcc\x0f\x4b\x51\x2f\xab\x79\xfd\x2b\x00\x00\xff\xff\x00\xf4\x32\x18\x1a\x03\x00\x00")

func sql0220_access_tokenSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0220_access_tokenSql,
		"sql/0220_access_token.sql",
	)
}

func sql0220_access_tokenSql() (*asset, error) {
	bytes, err := sql0220_access_tokenSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0220_access_token.sql", size: 794, mode: os.FileMode(493), modTime: time.Unix(1607739533, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/0000_initialize.sql": sql0000_initializeSql,
	"sql/0010_audience.sql": sql0010_audienceSql,
	"sql/0020_application.sql": sql0020_applicationSql,
	"sql/0030_user.sql": sql0030_userSql,
	"sql/0100_option.sql": sql0100_optionSql,
	"sql/0200_request_token.sql": sql0200_request_tokenSql,
	"sql/0220_access_token.sql": sql0220_access_tokenSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"0000_initialize.sql": &bintree{sql0000_initializeSql, map[string]*bintree{}},
		"0010_audience.sql": &bintree{sql0010_audienceSql, map[string]*bintree{}},
		"0020_application.sql": &bintree{sql0020_applicationSql, map[string]*bintree{}},
		"0030_user.sql": &bintree{sql0030_userSql, map[string]*bintree{}},
		"0100_option.sql": &bintree{sql0100_optionSql, map[string]*bintree{}},
		"0200_request_token.sql": &bintree{sql0200_request_tokenSql, map[string]*bintree{}},
		"0220_access_token.sql": &bintree{sql0220_access_tokenSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

