// Code generated by go-bindata.
// sources:
// sql/0000_initialize.sql
// sql/0010_audience.sql
// sql/0020_application.sql
// sql/0030_user.sql
// sql/0100_option.sql
// sql/0200_request_token.sql
// sql/0220_access_token.sql
// sql/0240_session.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sql0000_initializeSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xc1\x6e\xdb\x38\x14\x3c\x9b\x5f\x31\xf0\x1a\x90\x85\x58\x45\x7b\xdc\x18\x39\x38\x0e\xe3\x1a\x70\xe4\x5d\x49\xde\x04\xa8\x5b\x83\x2b\xbd\x58\x04\x24\x4a\x25\xa9\x24\x5e\xf4\xe3\x17\x94\xa2\x8d\x93\x26\x6d\x0f\x7b\xb1\x6c\xbe\xd1\x7b\x33\x43\x72\x1c\x04\x38\x29\xe5\x5e\x0b\x4b\xd8\xd4\x2c\x08\x10\xff\xb9\x82\x54\x30\x94\x5a\x59\x29\x78\x9b\xda\x83\x34\xa0\x07\x4a\x1b\x4b\x19\xee\x73\x52\xb0\xb9\x34\xe8\xde\x73\x20\x69\x20\xea\xba\x90\x94\xb1\x79\xc4\x67\x09\x47\x3c\xff\xc8\xaf\x66\x58\x5e\x22\x5c\x27\xe0\x37\xcb\x38\x89\x91\x4b\x5d\x4d\x7b\x04\xbf\x49\x78\x18\x2f\xd7\xe1\x0b\xd0\xb0\xde\xa7\xfa\x50\xdb\x6a\xf8\x73\x68\xa3\x44\x9a\x92\xb2\xbf\x00\xcd\x8d\xad\x34\x0d\xa7\x8c\x1d\x4b\x8e\xad\xb0\x54\x92\xb2\xe7\xb4\x97\xaa\x6f\xb2\x8e\x10\xf1\x3f\x56\xb3\x39\xc7\xe5\x26\x9c\x27\xae\x5d\x53\x67\xc2\xd2\xce\xca\x92\x8c\x15\x65\x3d\xf6\x59\xc4\x93\x4d\x14\xc6\x48\xa2\xe5\x62\xc1\x23\xcc\x62\x8c\x46\xec\x82\xcf\x57\xb3\x88\x33\x00\x48\xab\x02\x09\xbf\x49\x70\x7a\x86\xaf\x4d\x65\x69\x27\x33\x52\x76\x9c\x2c\x76\xb3\x68\xf1\xd7\xa7\xf7\x9f\xfd\x29\x3b\xe7\x8b\x65\xd8\xc2\x43\x7e\xed\x90\xee\xf1\xdb\x19\x3a\xc6\xe3\xb4\x2a\x26\x08\xd7\xd7\x63\xff\xf4\xd4\xd2\x83\xf5\xa7\x0c\xe8\x46\x3b\xe4\x94\xf1\xf0\x62\xca\x46\x23\xac\x66\xe1\x62\x33\x5b\x70\xd4\x45\xbd\x37\x5f\x8b\x29\xfb\x91\x1e\x53\x34\x7b\x79\x7b\x18\x0f\xef\x44\xd1\xd0\xb0\xa5\x79\x24\xc9\x91\xee\xf4\x00\x41\x00\x4d\x65\x75\x47\x06\x9d\xdd\x06\xe3\x4c\x8a\x54\x4b\x2b\x53\x18\xb9\x57\xc6\xc7\xad\xae\x4a\x08\xec\xe5\x1d\x29\x18\xab\xa5\xda\x23\x08\x18\x70\xbd\x4c\x3e\x3e\xed\x14\x65\x43\xd7\x77\xdc\xea\x8d\xf9\x8a\xcf\x13\xf4\xb5\x9e\x8b\xef\x10\x8f\xdf\x19\xe0\x4f\x3a\x0e\x45\x75\x4f\x3a\x15\x86\x0c\x6c\x4e\x8f\x33\x18\x30\xfc\xaf\xf0\x7d\xeb\xb6\xf4\x46\x5f\xe0\x32\x5a\x5f\x3d\xa3\x76\x34\x4d\x53\x5d\x88\xd4\x49\x56\x07\x9b\x3b\x35\x36\x17\xd6\x33\x50\x95\x85\x40\x41\xd6\x92\x9e\x40\x35\xe5\xdf\xee\x39\x0c\x86\x13\x54\x1a\x8d\xca\x48\x9b\xd4\x6d\x9c\xb7\xf3\x7c\xdc\x4b\x9b\xbb\xa2\xe3\x99\x1f\xea\x9c\x94\x78\xd5\x03\x4d\x7b\x7a\xa8\x77\x8f\x53\x7b\xc6\x13\x78\x9f\xbe\x88\xe0\x9f\xf7\xc1\xef\xdb\xed\x2e\xf8\x7c\xe2\x4d\xe0\x05\xee\x63\x2f\xbd\x37\xe4\x3c\xb9\x71\xa4\xc6\x6a\x59\x1a\xc7\x03\xf2\xd6\xb9\x77\x00\x3d\x48\x63\x51\xa9\xd6\xcb\x9c\x44\xe6\xd8\x5b\x21\x0b\x54\xb7\x2f\xfc\x75\x2f\x97\xbf\x40\xfa\x4d\x0d\xc1\x76\x7b\x32\x72\xac\x3d\x7f\x02\xef\xcb\x76\x1b\x74\x3f\x5e\x17\x70\x64\x93\x53\x70\x3c\xb0\x3f\xac\x1d\xb0\xe7\xf5\xfc\xf4\xbb\xfc\x8a\x93\x68\x39\x4f\xb0\xbc\xba\xda\x24\xb3\xf3\x15\xef\x6e\x7d\xaa\x49\x58\xb7\xa3\xed\xe1\xef\x4e\x6c\xab\x54\xa7\xed\x4d\x95\xca\x56\xed\x42\x66\xac\x5b\x68\x4a\x85\xc6\x74\x5b\x4f\x30\x35\xa5\xf2\x56\x52\x06\x43\xb5\xd0\xc2\x56\xba\xbf\x5f\x4f\x97\x8a\xec\xce\xf5\xde\xb9\xde\xbb\xb4\x2a\xc6\x3e\xc3\x8b\x98\x60\x2f\x63\xc2\x8d\xff\x69\x48\x60\xe0\x48\xfd\x10\xf7\xa1\xc3\xb5\xda\x1c\xae\x4f\x96\x01\xbf\xe1\xf3\x4d\xc2\xe1\x3d\xba\x38\xfa\xf0\xce\xc3\xb7\x6f\xed\x60\x36\xd8\xc4\xcb\x70\xe1\x92\x84\x0d\x96\x61\xb2\x76\xab\x53\x30\xb0\xae\xd1\xe9\x19\x34\xa9\xea\x5d\x1f\x17\x46\xa7\xfe\x94\x0d\xd8\xe0\xd5\xac\xca\x8c\x9d\xb4\xe6\x3a\x26\xdf\xc7\xd4\x1b\x29\xf5\x6a\x20\x73\x95\x3d\xaf\x5c\x54\xf7\xea\x7f\xf8\x7f\xfa\x37\x00\x00\xff\xff\xe2\x21\x9d\x12\xf1\x06\x00\x00")

func sql0000_initializeSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0000_initializeSql,
		"sql/0000_initialize.sql",
	)
}

func sql0000_initializeSql() (*asset, error) {
	bytes, err := sql0000_initializeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0000_initialize.sql", size: 1777, mode: os.FileMode(493), modTime: time.Unix(1607209419, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0010_audienceSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4b\x6f\xd3\x40\x14\x85\xf7\xfe\x15\x47\xdd\x34\x11\x0d\x02\x54\xb1\xc9\xca\xb1\x6f\x52\x83\x63\xa7\xe3\x19\x48\xd9\x58\x23\xcf\xa5\x19\x51\x3f\xe4\x99\xa8\xfc\x7c\x14\x27\xcd\x83\x0a\x09\x09\xb6\xf6\x77\xee\xe3\x9c\xb9\x93\x09\xde\xd4\xf6\xb1\xd7\x9e\xa1\xba\x60\x32\x41\x71\x9f\xc2\x36\x70\x5c\x79\xdb\x36\xb8\x56\xdd\x35\xac\x03\xff\xe4\x6a\xeb\xd9\xe0\x79\xc3\x0d\xfc\xc6\x3a\xec\x75\x3b\xc8\x3a\xe8\xae\x7b\xb2\x6c\x82\x20\x12\x14\x4a\x82\x0c\x67\x29\x21\x99\x23\xcb\x25\x68\x9d\x14\xb2\xc0\xc6\xf6\xed\x5b\xbd\x35\x96\x9b\x8a\xdd\x28\x00\x00\x6b\xa0\x54\x12\x63\x25\x92\x65\x28\x1e\xf0\x99\x1e\x10\xd3\x3c\x54\xa9\xc4\x23\x37\x65\xaf\x1b\xd3\xd6\xe5\x76\x6b\xcd\x68\x7c\x33\x48\xaa\x9e\xb5\x67\x53\x6a\x0f\x99\x2c\xa9\x90\xe1\x72\x25\xbf\x0d\x8d\x32\x95\xa6\x47\x79\xa4\x84\xa0\x4c\x96\x47\x68\x2f\xdf\x76\xe6\x5f\xe4\x8d\xae\x19\x5f\x42\x11\xdd\x85\x62\xf4\xf1\x76\x7c\x12\xaa\x2c\xb9\x57\xb4\xa7\x0c\xbb\xaa\xb7\xdd\xe0\xce\x0b\xfc\xfe\xdd\x87\xdb\xc3\x0a\xbe\xfd\xc1\x4d\xe9\xb8\xea\xd9\xe3\x53\x91\x67\xb3\x63\x99\x3d\xe0\xd8\x39\xdb\x36\xe5\x93\xfd\xce\xde\xd6\x8c\x59\xb2\x48\x32\x79\xa2\x30\x60\x35\x7b\x6d\xb4\xd7\xfb\x1a\xc1\x78\xfa\xf7\xfe\x97\x1d\xf7\xb5\x1d\xba\x0c\x51\x1c\xbf\xbf\x24\x72\xdc\x4b\xd0\x9c\x04\x65\x11\xbd\x4a\xd0\x9a\x31\xf2\x0c\x31\xa5\x24\x09\x51\x58\x44\x61\x3c\x18\x70\xaa\x0d\x49\x6b\x79\xb1\xdc\x59\xd2\xa3\xb3\xa6\x37\x67\xa2\xf1\xc5\x26\x22\x59\x2c\x48\x1c\x72\x2b\x77\x6e\x38\xaf\xeb\x2e\x00\x66\x34\xcf\x05\x41\xad\xe2\x1d\x98\x67\xbf\xcd\x17\x00\xf3\x5c\x80\xc2\xe8\x0e\x22\xff\x1a\x00\xb4\xa6\x48\x49\xc2\x4a\xe4\x11\xc5\x4a\xd0\xab\xaa\xa3\xab\xd3\xfb\xb8\xda\x4d\x71\x7e\x21\x71\xfb\xdc\xfc\x87\x1b\x89\x45\xbe\x3a\x04\x74\x39\xf0\xf4\x8f\xbf\xce\xd3\x9a\xfe\x0a\x00\x00\xff\xff\xaf\x20\x3b\x07\xb5\x03\x00\x00")

func sql0010_audienceSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0010_audienceSql,
		"sql/0010_audience.sql",
	)
}

func sql0010_audienceSql() (*asset, error) {
	bytes, err := sql0010_audienceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0010_audience.sql", size: 949, mode: os.FileMode(493), modTime: time.Unix(1608075466, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0020_applicationSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x4f\x6f\x9b\x4e\x10\xbd\xf3\x29\x46\xb9\x80\xf5\xb3\x7f\x6a\xab\xa8\x97\x9c\x08\x8c\x1d\x5a\x1b\x9c\x05\x5a\xa7\x17\xb4\x65\xa7\xf1\x2a\xe1\x8f\x76\xd7\x72\xd3\x4f\x5f\x01\x26\xc6\xb5\x63\x35\x6a\xd5\x1b\xec\xce\x9f\x37\xef\xbd\x9d\xc9\x04\xfe\x2b\xe4\xbd\xe2\x86\x20\xad\xad\xc9\x04\xe2\xdb\x39\xc8\x12\x34\xe5\x46\x56\x25\xd8\x69\x6d\x83\xd4\x40\xdf\x29\xdf\x18\x12\xb0\x5d\x53\x09\x66\x2d\x35\x74\x79\x4d\x90\xd4\xc0\xeb\xfa\x51\x92\xb0\x3c\x86\x6e\x82\x90\xdc\x2d\x11\xd6\x52\x55\xff\xcf\x98\x1b\x26\x59\xfb\xef\xc6\x80\x61\xba\x00\xc7\xe6\x1b\xb3\xae\x94\xfc\xd1\xa6\x67\x79\x25\xc8\x1e\x83\x9d\x3f\x4a\x2a\x4d\x96\x2b\x12\x54\x1a\xc9\x1f\x75\x73\x5a\x73\xad\xb7\x95\x12\xcd\xb7\xa2\x6f\x8a\xf4\x3a\x33\xd5\x03\x95\xf6\xe8\xca\x7a\xee\xe7\x5e\xcf\x11\x82\x29\x84\x51\x02\xb8\x0a\xe2\x24\xee\xda\xb7\xb8\xf2\xb6\x8f\x76\x2c\x00\x00\x29\x20\x4d\x03\x1f\x96\x2c\x58\xb8\xec\x0e\x3e\xe2\x1d\xf8\x38\x75\xd3\x79\x02\xf7\x54\x66\x8a\x97\xa2\x2a\xb2\xcd\x46\x0a\x67\x34\x6e\x53\x72\x45\xdc\x90\xc8\xb8\x81\x24\x58\x60\x9c\xb8\x8b\x65\xf2\xa5\xed\x15\xa6\xf3\xf9\x73\xba\x97\x32\x86\xcd\xb4\x7d\x50\x97\xbe\xa9\xc5\x9f\xa4\x97\xbc\x20\xf8\xe4\x32\xef\xc6\x65\xce\xfb\xcb\xd1\x3e\x31\x0d\x83\xdb\x14\xbb\x28\x41\x3a\x57\xb2\x6e\xf5\xe8\x83\xdf\xbe\x79\x77\xb9\x1b\xc1\x3c\xd5\x04\x09\xae\x92\xe3\xb6\xf6\x96\xbe\xda\x5d\x94\xa6\x5c\x91\xc9\x1e\xe8\xa9\x8d\xdd\xc1\x57\x52\xc3\x87\x38\x0a\xaf\xbb\xff\x82\x0c\x17\xdc\xf0\xee\xcc\x1a\xa8\x10\x84\x3e\xae\x60\x40\xf9\x50\x4b\x88\xc2\x13\x92\x48\x31\x1e\x74\x7d\xa5\xa2\x59\x4d\xaa\x90\x5a\xf7\xe2\x0e\xaf\x7a\x99\x9f\xc7\x65\x38\x45\x86\xa1\x87\xa7\x9c\x21\xc5\xa8\xc1\xe7\xe3\x1c\x13\x04\xcf\x8d\x3d\xd7\x6f\x89\xe5\x1b\x21\xa9\xcc\xe9\xa8\x5e\x73\xb9\x6f\x7f\x48\x6d\x73\x37\x8d\x18\x06\xb3\xb0\xb1\x97\x33\x28\x32\x1e\x24\x8d\xa0\xe5\xf3\x08\x58\x1f\x3d\x9c\xee\x7c\x89\x23\xe8\xfd\x69\xba\xf4\xdd\xc3\x81\x06\xb6\x77\x0e\xf9\x1a\xc3\x4b\x4d\xac\xd7\xea\x72\xaf\x78\x69\xfe\xb9\x24\x2f\x32\x79\xa6\x58\x8b\x34\x6b\x5f\xc7\xaf\xeb\x6a\xa8\xe6\x6f\xb3\xb6\xaf\x77\xc8\x1a\x0b\x66\x33\x64\xbb\x55\x90\x19\x59\x90\x36\xbc\xa8\x2d\x80\x6b\x6c\xac\xd2\x2b\x75\xea\x91\x74\x6e\x02\x74\xbd\x1b\x60\xd1\x67\x0b\x00\x57\xe8\xa5\x09\xc2\x92\x45\x1e\xfa\x29\xc3\xa3\xc2\xce\xc5\x7e\xeb\x5c\x34\x40\x86\x9b\xde\xaf\xb6\xe5\x5f\xd8\xf5\x3e\x8b\x96\x3b\x3f\x1c\x61\xbe\x3a\x77\x3b\x74\xf6\xf9\xc0\xce\x48\x57\x3f\x03\x00\x00\xff\xff\xe5\xf9\xbd\xd0\xa7\x06\x00\x00")

func sql0020_applicationSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0020_applicationSql,
		"sql/0020_application.sql",
	)
}

func sql0020_applicationSql() (*asset, error) {
	bytes, err := sql0020_applicationSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0020_application.sql", size: 1703, mode: os.FileMode(493), modTime: time.Unix(1608048537, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0030_userSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x5d\x8f\x9b\x30\x10\x7c\xe7\x57\x8c\xee\xe5\x40\x4d\x2a\xb5\xaa\xaa\x4a\xf7\x44\x60\x93\xa3\x25\x90\x33\x76\x9b\xeb\x0b\xb2\x82\x9b\x58\x0a\x1f\xc2\xa0\xdc\xcf\xaf\x80\x7c\x90\x4b\x5b\x55\x6a\x5f\x77\x77\xc6\x33\xb3\xeb\xe9\x14\x6f\x72\xbd\xad\x65\xa3\x20\x2a\x6b\x3a\x45\xf2\x14\x42\x17\x30\x6a\xd3\xe8\xb2\xc0\xbd\xa8\xee\xa1\x0d\xd4\x8b\xda\xb4\x8d\xca\x70\xd8\xa9\x02\xcd\x4e\x1b\x0c\xb8\x6e\x48\x1b\xc8\xaa\xda\x6b\x95\x59\x1e\x23\x97\x13\xb8\x3b\x0b\x09\xc1\x1c\x51\xcc\x41\xeb\x20\xe1\x09\x76\xba\x2e\xdf\xb6\x46\xd5\xc6\xb6\x00\x40\x67\x10\x22\xf0\xb1\x62\xc1\xd2\x65\xcf\xf8\x42\xcf\xf0\x69\xee\x8a\x90\x63\xab\x8a\xb4\x96\x45\x56\xe6\x69\xdb\xea\xcc\x76\x26\x3d\x64\x53\x2b\xd9\xa8\x2c\x95\x0d\x78\xb0\xa4\x84\xbb\xcb\x15\xff\xde\x3f\x12\x89\x30\x3c\xc3\x3d\xc1\x18\x45\x3c\x3d\x0f\x0d\xf0\xb6\xca\xfe\x05\xbe\x2f\xb7\xba\xc0\x57\x97\x79\x8f\x2e\xb3\xdf\xbd\xff\xe4\x5c\xa0\x22\x0a\x9e\x04\x0d\x73\x95\x34\xe6\x50\xd6\x59\xba\x93\x66\x87\x7e\xf8\xe3\x07\x67\xd2\xb5\xae\xfb\xea\xa5\xd2\xb5\x32\xaf\xf4\x1c\x49\xea\xf2\x87\xde\x2b\x7c\x4e\xe2\x68\x36\x94\x72\xd5\xc8\x4c\x36\x72\xa8\x59\xce\x83\xf5\x57\x71\xa7\x95\xaa\x73\x6d\x8c\x2e\x8b\x3e\xf9\xbe\x76\x0a\xff\x6c\x80\xd1\x9c\x18\x45\x1e\x5d\x2d\x4a\x67\x0e\xe2\x08\x3e\x85\xc4\x09\x9e\x9b\x78\xae\xdf\xbb\x94\x6d\xa6\x55\xb1\x51\x37\x44\x5d\xf3\xf2\x20\x38\xad\xf9\x55\x6f\x1e\x33\x0a\x16\x51\xb7\x6d\x7b\x44\x32\x19\x81\x9c\x21\xa6\xd7\x8a\xce\xd3\x63\x3f\x7f\xa6\xb8\x91\x7e\xaa\x8a\x95\xef\x5e\x1b\x1a\x5d\xa1\x7d\x4c\x68\x82\xdf\xb1\x5f\x65\xcf\x82\xc5\x82\xd8\xf1\xb8\xd2\x46\xe7\xca\x34\x32\xaf\x2c\x60\x46\x9d\xdb\xd3\x63\x71\x34\x4a\x76\x48\x02\xe4\x7a\x8f\x60\xf1\x37\x0b\xa0\x35\x79\x82\x13\x56\x2c\xf6\xc8\x17\x8c\x6e\x18\xed\xbb\xcb\x01\xdf\x75\x0a\xc6\xbf\xd7\x2f\x0f\xc5\x7f\xf8\xbf\x3e\x8b\x57\xc7\x73\xba\x88\x7d\xf8\x65\x79\xbc\x87\x07\xeb\x67\x00\x00\x00\xff\xff\x8a\x59\x93\x7d\x4a\x04\x00\x00")

func sql0030_userSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0030_userSql,
		"sql/0030_user.sql",
	)
}

func sql0030_userSql() (*asset, error) {
	bytes, err := sql0030_userSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0030_user.sql", size: 1098, mode: os.FileMode(493), modTime: time.Unix(1607739551, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0100_optionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x4e\x83\x40\x10\x86\xef\xfb\x14\xff\xad\x10\x8b\x07\x13\xbd\xf4\x44\xcb\x36\xa2\x08\x75\x01\x63\x4f\x66\xc3\x4e\x64\x92\x76\xd9\x74\xc1\xfa\xf8\xa6\x50\x0d\x0f\xe0\x75\xe6\xfb\x66\x92\x2f\x8a\x70\x73\xe4\xcf\x93\xee\x09\xb5\x13\x51\x84\xf2\x35\x03\x5b\x78\x6a\x7a\xee\x2c\x16\xb5\x5b\x80\x3d\xe8\x9b\x9a\xa1\x27\x83\x73\x4b\x16\x7d\xcb\x1e\x93\x77\x81\xd8\x43\x3b\x77\x60\x32\x62\xa3\x64\x5c\x49\x54\xf1\x3a\x93\x48\xb7\xc8\x8b\x0a\xf2\x3d\x2d\xab\x12\x2d\x9f\xba\xdb\xce\x5d\x0c\x1f\x08\x00\xd0\x83\x61\xb2\x0d\x7d\xb0\x41\x5d\xa7\xc9\x48\xe7\x75\x96\x41\xc9\xad\x54\x32\xdf\xc8\xab\xf6\x4b\xfa\x80\x4d\xb8\x1c\x65\xab\x8f\x84\xb7\x58\x6d\x1e\x63\x15\xdc\xdd\x3f\x84\x7f\xf6\xb4\xff\xd2\x87\x81\xf0\x54\x16\xf9\x7a\x1a\xec\x54\xfa\x12\xab\x3d\x9e\xe5\x3e\x98\x7d\x5e\x8e\x97\x42\x11\xae\x84\x98\xe7\x48\xba\xb3\xfd\x87\x20\x89\x2a\x76\xd7\x1c\xf3\x00\xab\x9f\x00\x00\x00\xff\xff\x8b\x95\xf3\x30\x7a\x01\x00\x00")

func sql0100_optionSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0100_optionSql,
		"sql/0100_option.sql",
	)
}

func sql0100_optionSql() (*asset, error) {
	bytes, err := sql0100_optionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0100_option.sql", size: 378, mode: os.FileMode(493), modTime: time.Unix(1607702932, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0200_request_tokenSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4f\x6f\x9b\x4e\x10\xbd\xf3\x29\xe6\x06\xd6\x2f\xfe\x1d\xaa\xb6\x97\x9c\x08\x8c\x5b\x1a\x0c\xce\xb2\x48\x76\x2f\x2b\xc4\x4e\xcd\xaa\x36\xd0\xdd\x45\x49\xbf\x7d\xc5\x1f\x13\x5b\xb1\xa3\x1e\x7a\x64\xde\xbc\x37\xff\x1e\xbb\x5c\xc2\x7f\x47\xb5\xd7\x85\x25\xc8\x5b\x67\xb9\x84\xec\x29\x06\x55\x83\xa1\xd2\xaa\xa6\x06\x37\x6f\x5d\x50\x06\xe8\x85\xca\xce\x92\x84\xe7\x8a\x6a\xb0\x95\x32\x30\xf2\xfa\x24\x65\xa0\x68\xdb\x83\x22\xe9\x04\x0c\x7d\x8e\xc0\x77\x1b\x84\x4a\xe9\xe6\x7f\x86\x4f\x39\x66\x5c\xf0\xf4\x11\x13\x31\xc4\xfd\x0c\x30\xc9\xd7\x9e\x7b\x68\xf6\xaa\x76\xef\xc0\x2d\x3a\x5b\x89\xb2\x91\xd4\x7f\x68\xfa\xa1\xc9\x54\xc2\x36\x3f\xa9\x76\x17\xf7\xce\x2c\xea\x3f\xc4\x08\xd1\x0a\x92\x94\x03\x6e\xa3\x8c\x67\x63\x0d\x4d\xbf\x3a\x32\x76\x64\x18\xcf\x01\x00\x50\x12\xf2\x3c\x0a\x61\xc3\xa2\xb5\xcf\x76\xf0\x88\x3b\x08\x71\xe5\xe7\x31\x87\x3d\xd5\x42\x17\xb5\x6c\x8e\xa2\xeb\x94\xf4\x16\x77\x03\xa5\xd4\x54\x58\x92\xa2\xb0\xc0\xa3\x35\x66\xdc\x5f\x6f\xf8\xf7\xa1\x5a\x92\xc7\xf1\x4c\x0f\x72\xc6\x30\xe1\x62\x4e\x1a\xe9\x45\x27\x15\xd5\x25\x89\x53\xe9\x13\x71\x82\xfb\x0d\x95\xc3\xc2\x6e\x64\x74\x86\xf4\x09\x1a\x23\xf6\x77\x4b\x37\xd7\x78\x49\x36\x65\xd3\x12\x7c\xcb\xd2\xe4\x61\x0c\xd0\x4b\xab\x34\x99\x5b\xd3\x4c\x23\x37\x92\x44\x59\x15\x87\x03\xd5\x7b\x02\x8e\x5b\xfe\x6e\x86\x38\x92\xad\x1a\x09\xc1\x57\x9f\x79\x1f\x17\x6f\x77\xe3\x66\x1f\x3e\x7d\x76\xe7\x89\x45\xa7\xd5\x35\x55\x4d\x52\x69\x2a\xed\x8c\x4f\x43\xd8\xde\x88\xaf\xdf\xab\x94\x61\xf4\x25\x19\x8e\xe7\x9d\xed\x77\x01\x0c\x57\xc8\x30\x09\x70\xb2\xc0\x09\x34\x5e\x8f\xa6\x09\x84\x18\x23\x47\x08\xfc\x2c\xf0\x43\xbc\x26\x77\x71\x8f\x2b\x8a\xaf\xf8\xdf\x8b\x4e\x27\x7c\xab\xd6\x03\x37\x64\x9c\x33\x8b\x47\x49\x88\x5b\xb8\xf0\xb3\x28\xda\xb6\x27\x5d\x73\xfa\xe5\x0c\x77\x83\x5f\x16\xf7\xef\x89\xf5\x7d\xdc\x52\x9b\x9a\x9f\x65\x9c\xf3\xd7\x21\x6c\x9e\xeb\x7f\xf0\x3e\x84\x2c\xdd\x4c\x3f\xf2\x95\x16\xee\xff\x04\x00\x00\xff\xff\x55\xb7\xc8\x6c\x90\x04\x00\x00")

func sql0200_request_tokenSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0200_request_tokenSql,
		"sql/0200_request_token.sql",
	)
}

func sql0200_request_tokenSql() (*asset, error) {
	bytes, err := sql0200_request_tokenSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0200_request_token.sql", size: 1168, mode: os.FileMode(493), modTime: time.Unix(1608048563, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0220_access_tokenSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x4d\x6f\x9b\x40\x14\xbc\xf3\x2b\xe6\x16\xac\xd6\x3d\x55\xbd\xf8\xb4\x81\xe7\x96\x16\x83\xbb\x2c\x95\xd3\x0b\x42\xf0\x14\xaf\x12\x2f\x68\x17\x9a\xfc\xfc\x8a\xaf\xd4\xad\x1d\xa9\x87\x5c\xdf\xbc\x99\xb7\x33\x3b\xeb\x35\xde\x9d\xf4\xbd\x2d\x3b\x46\xde\x7a\xeb\x35\xb2\xef\x31\xb4\x81\xe3\xaa\xd3\x8d\xc1\x4d\xde\xde\x40\x3b\xf0\x33\x57\x7d\xc7\x35\x9e\x8e\x6c\xd0\x1d\xb5\xc3\xc4\x1b\x96\xb4\x43\xd9\xb6\x8f\x9a\x6b\x2f\x90\x24\x14\x41\x89\xdb\x98\x10\x6d\x91\xa4\x0a\x74\x88\x32\x95\xe1\xa8\x6d\xf3\xa1\xac\x2a\x76\xae\xe8\x9a\x07\x36\xce\xf7\x00\x40\xd7\xc8\xf3\x28\xc4\x5e\x46\x3b\x21\xef\xf0\x8d\xee\x10\xd2\x56\xe4\xb1\xc2\x3d\x9b\xc2\x96\xa6\x6e\x4e\x45\xdf\xeb\xda\x5f\xbd\x1f\x29\x95\xe5\xb2\xe3\xba\x28\x3b\xa8\x68\x47\x99\x12\xbb\xbd\xfa\x39\x1e\x4b\xf2\x38\x7e\xa1\x07\xb9\x94\x94\xa8\xe2\x65\x69\xa2\x97\x7d\xad\xd9\x54\x5c\x2c\xa7\x17\xe2\x0c\x0f\x5e\xaa\xd1\xda\x2b\x1b\xda\xb9\x9e\x2d\x14\x1d\xd4\x34\xe8\x1d\xdb\x65\x77\x9a\x8c\x0e\x8b\xde\x31\x7e\x08\x19\x7c\x11\xd2\xff\xf4\x71\x7e\xbd\xab\x9a\x96\xf1\x35\x4b\x93\xdb\xd9\xce\x63\xa9\x4f\xee\x7c\xc2\xcf\xad\xb6\xec\xfe\x31\x38\x61\x96\x7f\x35\x0f\x17\xe6\x27\x6c\x9b\x4a\x8a\x3e\x27\x63\x86\xfe\x99\xcd\x15\x24\x6d\x49\x52\x12\xd0\xf2\x11\x33\xe8\xfc\x01\x4d\x13\x84\x14\x93\x22\x04\x22\x0b\x44\x48\xd7\xe4\xfe\x8a\xe5\x8a\xe2\x1f\xfc\xff\x45\xe7\xe0\x2e\xd5\x06\xe0\x15\x19\x6f\xb5\xf1\x96\xa2\x45\x49\x48\x07\x9c\xb7\x6a\xc8\xdc\x0e\xa4\x2b\x7d\x5b\xae\x6d\x3c\xef\xbc\xf9\x61\xf3\x64\xde\xa0\xfb\xa1\x4c\xf7\x73\xf3\x2f\x6f\x6f\x7e\x07\x00\x00\xff\xff\xc2\x70\x6e\x26\x6b\x03\x00\x00")

func sql0220_access_tokenSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0220_access_tokenSql,
		"sql/0220_access_token.sql",
	)
}

func sql0220_access_tokenSql() (*asset, error) {
	bytes, err := sql0220_access_tokenSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0220_access_token.sql", size: 875, mode: os.FileMode(493), modTime: time.Unix(1608064678, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0240_sessionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xcf\xee\x9a\x40\x10\xbe\xf3\x14\xdf\x4d\x4c\x4b\x5f\xc0\x13\x85\xa1\x21\x45\xb0\xcb\x92\x68\x2f\x64\xc3\x4e\x74\xd3\xba\x10\x16\xaa\x8f\xdf\x20\x4a\x6c\xaa\xb7\xdf\x71\xf7\xfb\x97\x99\xf9\x82\x00\x9f\xce\xe6\xd8\xab\x81\x51\x75\x5e\x10\xa0\xfc\x91\xc1\x58\x38\x6e\x06\xd3\x5a\xac\xaa\x6e\x05\xe3\xc0\x57\x6e\xc6\x81\x35\x2e\x27\xb6\x18\x4e\xc6\x61\xd6\x4d\x24\xe3\xa0\xba\xee\xb7\x61\xed\x45\x82\x42\x49\x90\xe1\xd7\x8c\x90\x26\xc8\x0b\x09\xda\xa7\xa5\x2c\x71\x32\x7d\xfb\xc5\xb1\x73\xa6\xb5\xce\xf7\x00\xc0\x68\x54\x55\x1a\x63\x27\xd2\x6d\x28\x0e\xf8\x4e\x07\xc4\x94\x84\x55\x26\x71\x64\x5b\xf7\xca\xea\xf6\x5c\x8f\xa3\xd1\xfe\xfa\xf3\x4d\xa2\x46\x6d\xd8\x36\x5c\x3f\xb4\x53\x42\x5e\x65\xd9\x0c\x8f\x8e\xfb\x07\x34\xff\x68\x35\x28\x48\xda\xcb\xf9\xd9\xf4\xac\x06\xd6\xb5\x1a\x20\xd3\x2d\x95\x32\xdc\xee\xe4\xcf\xc5\x65\x89\x8f\x2a\x21\x28\x97\xf5\x42\x9a\xe5\x7c\xed\x4c\xcf\xee\x9d\x7c\x26\xf5\xfc\xa7\xfd\xf5\x22\x63\x21\x24\x85\xa0\xf4\x5b\x7e\x9b\xd7\x7f\x9a\x68\x0d\x41\x09\x09\xca\x23\xba\xef\xeb\x01\x3a\x7f\x42\x8b\x1c\x31\x65\x24\x09\x51\x58\x46\x61\x4c\x2f\xec\xee\x1b\xf8\xdf\x6a\x02\xde\xd8\x78\xeb\x8d\xe7\x79\xcf\x65\x88\xdb\x8b\xfd\x80\x3a\xc4\xa2\xd8\xdd\xcb\xf0\xcf\xf9\x37\x7f\x03\x00\x00\xff\xff\xa3\xfa\xb0\x3a\x79\x02\x00\x00")

func sql0240_sessionSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0240_sessionSql,
		"sql/0240_session.sql",
	)
}

func sql0240_sessionSql() (*asset, error) {
	bytes, err := sql0240_sessionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0240_session.sql", size: 633, mode: os.FileMode(420), modTime: time.Unix(1608138533, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/0000_initialize.sql": sql0000_initializeSql,
	"sql/0010_audience.sql": sql0010_audienceSql,
	"sql/0020_application.sql": sql0020_applicationSql,
	"sql/0030_user.sql": sql0030_userSql,
	"sql/0100_option.sql": sql0100_optionSql,
	"sql/0200_request_token.sql": sql0200_request_tokenSql,
	"sql/0220_access_token.sql": sql0220_access_tokenSql,
	"sql/0240_session.sql": sql0240_sessionSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"0000_initialize.sql": &bintree{sql0000_initializeSql, map[string]*bintree{}},
		"0010_audience.sql": &bintree{sql0010_audienceSql, map[string]*bintree{}},
		"0020_application.sql": &bintree{sql0020_applicationSql, map[string]*bintree{}},
		"0030_user.sql": &bintree{sql0030_userSql, map[string]*bintree{}},
		"0100_option.sql": &bintree{sql0100_optionSql, map[string]*bintree{}},
		"0200_request_token.sql": &bintree{sql0200_request_tokenSql, map[string]*bintree{}},
		"0220_access_token.sql": &bintree{sql0220_access_tokenSql, map[string]*bintree{}},
		"0240_session.sql": &bintree{sql0240_sessionSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

