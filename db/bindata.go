// Code generated by go-bindata.
// sources:
// sql/0000_initialize.sql
// sql/0010_audience.sql
// sql/0020_application.sql
// sql/0030_user.sql
// sql/0040_access_token.sql
// sql/0100_option.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sql0000_initializeSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xc1\x6e\xdb\x38\x14\x3c\x9b\x5f\x31\xf0\x1a\x90\x85\x58\x45\x7b\xdc\x18\x39\x38\x0e\xe3\x1a\x70\xe4\x5d\x49\xde\x04\xa8\x5b\x83\x2b\xbd\x58\x04\x24\x4a\x25\xa9\x24\x5e\xf4\xe3\x17\x94\xa2\x8d\x93\x26\x6d\x0f\x7b\xb1\x6c\xbe\xd1\x7b\x33\x43\x72\x1c\x04\x38\x29\xe5\x5e\x0b\x4b\xd8\xd4\x2c\x08\x10\xff\xb9\x82\x54\x30\x94\x5a\x59\x29\x78\x9b\xda\x83\x34\xa0\x07\x4a\x1b\x4b\x19\xee\x73\x52\xb0\xb9\x34\xe8\xde\x73\x20\x69\x20\xea\xba\x90\x94\xb1\x79\xc4\x67\x09\x47\x3c\xff\xc8\xaf\x66\x58\x5e\x22\x5c\x27\xe0\x37\xcb\x38\x89\x91\x4b\x5d\x4d\x7b\x04\xbf\x49\x78\x18\x2f\xd7\xe1\x0b\xd0\xb0\xde\xa7\xfa\x50\xdb\x6a\xf8\x73\x68\xa3\x44\x9a\x92\xb2\xbf\x00\xcd\x8d\xad\x34\x0d\xa7\x8c\x1d\x4b\x8e\xad\xb0\x54\x92\xb2\xe7\xb4\x97\xaa\x6f\xb2\x8e\x10\xf1\x3f\x56\xb3\x39\xc7\xe5\x26\x9c\x27\xae\x5d\x53\x67\xc2\xd2\xce\xca\x92\x8c\x15\x65\x3d\xf6\x59\xc4\x93\x4d\x14\xc6\x48\xa2\xe5\x62\xc1\x23\xcc\x62\x8c\x46\xec\x82\xcf\x57\xb3\x88\x33\x00\x48\xab\x02\x09\xbf\x49\x70\x7a\x86\xaf\x4d\x65\x69\x27\x33\x52\x76\x9c\x2c\x76\xb3\x68\xf1\xd7\xa7\xf7\x9f\xfd\x29\x3b\xe7\x8b\x65\xd8\xc2\x43\x7e\xed\x90\xee\xf1\xdb\x19\x3a\xc6\xe3\xb4\x2a\x26\x08\xd7\xd7\x63\xff\xf4\xd4\xd2\x83\xf5\xa7\x0c\xe8\x46\x3b\xe4\x94\xf1\xf0\x62\xca\x46\x23\xac\x66\xe1\x62\x33\x5b\x70\xd4\x45\xbd\x37\x5f\x8b\x29\xfb\x91\x1e\x53\x34\x7b\x79\x7b\x18\x0f\xef\x44\xd1\xd0\xb0\xa5\x79\x24\xc9\x91\xee\xf4\x00\x41\x00\x4d\x65\x75\x47\x06\x9d\xdd\x06\xe3\x4c\x8a\x54\x4b\x2b\x53\x18\xb9\x57\xc6\xc7\xad\xae\x4a\x08\xec\xe5\x1d\x29\x18\xab\xa5\xda\x23\x08\x18\x70\xbd\x4c\x3e\x3e\xed\x14\x65\x43\xd7\x77\xdc\xea\x8d\xf9\x8a\xcf\x13\xf4\xb5\x9e\x8b\xef\x10\x8f\xdf\x19\xe0\x4f\x3a\x0e\x45\x75\x4f\x3a\x15\x86\x0c\x6c\x4e\x8f\x33\x18\x30\xfc\xaf\xf0\x7d\xeb\xb6\xf4\x46\x5f\xe0\x32\x5a\x5f\x3d\xa3\x76\x34\x4d\x53\x5d\x88\xd4\x49\x56\x07\x9b\x3b\x35\x36\x17\xd6\x33\x50\x95\x85\x40\x41\xd6\x92\x9e\x40\x35\xe5\xdf\xee\x39\x0c\x86\x13\x54\x1a\x8d\xca\x48\x9b\xd4\x6d\x9c\xb7\xf3\x7c\xdc\x4b\x9b\xbb\xa2\xe3\x99\x1f\xea\x9c\x94\x78\xd5\x03\x4d\x7b\x7a\xa8\x77\x8f\x53\x7b\xc6\x13\x78\x9f\xbe\x88\xe0\x9f\xf7\xc1\xef\xdb\xed\x2e\xf8\x7c\xe2\x4d\xe0\x05\xee\x63\x2f\xbd\x37\xe4\x3c\xb9\x71\xa4\xc6\x6a\x59\x1a\xc7\x03\xf2\xd6\xb9\x77\x00\x3d\x48\x63\x51\xa9\xd6\xcb\x9c\x44\xe6\xd8\x5b\x21\x0b\x54\xb7\x2f\xfc\x75\x2f\x97\xbf\x40\xfa\x4d\x0d\xc1\x76\x7b\x32\x72\xac\x3d\x7f\x02\xef\xcb\x76\x1b\x74\x3f\x5e\x17\x70\x64\x93\x53\x70\x3c\xb0\x3f\xac\x1d\xb0\xe7\xf5\xfc\xf4\xbb\xfc\x8a\x93\x68\x39\x4f\xb0\xbc\xba\xda\x24\xb3\xf3\x15\xef\x6e\x7d\xaa\x49\x58\xb7\xa3\xed\xe1\xef\x4e\x6c\xab\x54\xa7\xed\x4d\x95\xca\x56\xed\x42\x66\xac\x5b\x68\x4a\x85\xc6\x74\x5b\x4f\x30\x35\xa5\xf2\x56\x52\x06\x43\xb5\xd0\xc2\x56\xba\xbf\x5f\x4f\x97\x8a\xec\xce\xf5\xde\xb9\xde\xbb\xb4\x2a\xc6\x3e\xc3\x8b\x98\x60\x2f\x63\xc2\x8d\xff\x69\x48\x60\xe0\x48\xfd\x10\xf7\xa1\xc3\xb5\xda\x1c\xae\x4f\x96\x01\xbf\xe1\xf3\x4d\xc2\xe1\x3d\xba\x38\xfa\xf0\xce\xc3\xb7\x6f\xed\x60\x36\xd8\xc4\xcb\x70\xe1\x92\x84\x0d\x96\x61\xb2\x76\xab\x53\x30\xb0\xae\xd1\xe9\x19\x34\xa9\xea\x5d\x1f\x17\x46\xa7\xfe\x94\x0d\xd8\xe0\xd5\xac\xca\x8c\x9d\xb4\xe6\x3a\x26\xdf\xc7\xd4\x1b\x29\xf5\x6a\x20\x73\x95\x3d\xaf\x5c\x54\xf7\xea\x7f\xf8\x7f\xfa\x37\x00\x00\xff\xff\xe2\x21\x9d\x12\xf1\x06\x00\x00")

func sql0000_initializeSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0000_initializeSql,
		"sql/0000_initialize.sql",
	)
}

func sql0000_initializeSql() (*asset, error) {
	bytes, err := sql0000_initializeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0000_initialize.sql", size: 1777, mode: os.FileMode(511), modTime: time.Unix(1607014834, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0010_audienceSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4d\x6f\xda\x4c\x14\x85\xf7\xfe\x15\x47\xd9\x60\xf4\x86\x57\x34\x4d\xd9\x64\x65\xec\x0b\xb8\x31\xb6\x33\x9e\x69\x61\x65\x8d\xec\x5b\x18\x15\x7f\xc8\x1e\x94\xfe\xfc\x8a\x8f\x06\x42\x76\x55\x77\x23\xdd\xf3\xdc\x39\xba\xe7\x8c\x46\xf8\xaf\x32\x9b\x4e\x5b\x86\x6a\x9d\xd1\x08\xd9\x4b\x04\x53\xa3\xe7\xc2\x9a\xa6\xc6\x40\xb5\x03\x98\x1e\xfc\x8b\x8b\xbd\xe5\x12\xaf\x5b\xae\x61\xb7\xa6\xc7\x89\x3b\x88\x4c\x0f\xdd\xb6\x3b\xc3\xa5\xe3\xf8\x82\x3c\x49\x90\xeb\x94\x20\x93\x67\x8a\x73\x2f\x9a\x27\x22\x94\x8b\x25\xbc\x0c\x14\xab\x25\xdc\xc1\x22\x7b\xf8\x32\x19\xdc\x63\x20\x8e\x8f\xe1\xd3\x05\xf4\xa6\x11\x21\x9c\x21\x4e\x24\x68\x15\x66\x32\xc3\xd6\x74\xcd\xff\x7a\x5f\x1a\xae\x0b\xee\x5d\x07\x00\x4c\x09\xa5\xc2\x00\xa9\x08\x97\x9e\x58\xe3\x99\xd6\x08\x68\xe6\xa9\x48\x62\xc3\x75\xde\xe9\xba\x6c\xaa\x7c\xbf\x37\xa5\x3b\xbc\x3f\x22\x45\xc7\xda\x72\x99\x6b\x0b\x19\x2e\x29\x93\xde\x32\x3d\x7e\x13\xab\x28\x7a\x83\x7d\x25\x04\xc5\x32\x7f\x93\x9c\xe0\x7d\x5b\xfe\x3d\x5c\xeb\x8a\xf1\xcd\x13\xfe\xc2\x13\xee\xe4\x71\x78\x01\x55\x1c\xbe\x28\x3a\xa9\x4a\xee\x8b\xce\xb4\xc7\x93\xfe\x11\x7f\x1a\x3f\x3c\x9e\xed\xdb\xe6\x27\xd7\xf9\xce\xfc\x60\x6b\x2a\xc6\x34\x9c\x87\xb1\xfc\x60\xc1\xfd\x3c\x19\x8f\xdf\x11\x7a\xb7\x69\x3a\x63\xb7\xd5\x6d\x1e\xd7\xa2\x9e\x8b\x8e\x2d\x24\xad\x2e\x2b\x4f\xf3\x96\xbb\xca\xf4\xbd\x69\xea\x1e\x5f\xb3\x24\x9e\xde\xcc\x2b\xb6\xba\xd4\x56\x9f\x86\xce\x75\x94\x22\x9c\xcf\x49\x9c\x4f\x97\x1f\x5c\xf7\x56\x57\xad\x03\x4c\x69\x96\x08\x82\x4a\x83\x83\x30\x89\x6f\x22\x76\x80\x59\x22\x40\x9e\xbf\x80\x48\xbe\x3b\x00\xad\xc8\x57\x92\x90\x8a\xc4\xa7\x40\x09\xfa\xb0\xd5\xbd\xbb\x44\x74\x77\x70\x71\xdd\xed\xa0\x79\xad\xff\x41\xbb\x03\x91\xa4\xe7\x86\xbe\x37\xfc\xf4\x3b\x00\x00\xff\xff\x25\x1a\x75\x28\x49\x03\x00\x00")

func sql0010_audienceSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0010_audienceSql,
		"sql/0010_audience.sql",
	)
}

func sql0010_audienceSql() (*asset, error) {
	bytes, err := sql0010_audienceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0010_audience.sql", size: 841, mode: os.FileMode(511), modTime: time.Unix(1607014735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0020_applicationSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xcb\x6e\x9c\x3c\x18\xdd\xf3\x14\x9f\xb2\x19\xa2\x3f\xf3\x2b\x6d\xa3\x6c\xb2\x22\xe0\x49\x68\x19\x20\x1e\xbb\x4d\x54\x55\xc8\xc5\x5f\x82\x55\x30\xc8\x36\x9d\xb6\x4f\x5f\x71\xc9\x24\x1a\xd4\x4d\xd5\x1d\x32\xe7\x66\x9d\xe3\xf5\x1a\xfe\x6b\xd4\x93\x11\x0e\x81\x77\xde\x7a\x0d\xbb\xbb\x04\x94\x06\x8b\xa5\x53\xad\x86\x15\xef\x56\xa0\x2c\xe0\x0f\x2c\x7b\x87\x12\xf6\x15\x6a\x70\x95\xb2\x30\xf1\x06\x90\xb2\x20\xba\xae\x56\x28\xbd\x90\x92\x80\x11\x60\x0f\x39\x81\x4a\x99\xf6\xff\x20\xcf\x93\x38\x0c\x58\x9c\xa5\xc5\x78\x2a\x2c\x90\x94\x6f\xc1\x5f\xed\xf1\xeb\xea\x0c\x56\x5a\x38\xf5\x1d\x87\xaf\x46\x94\x95\xd2\xb8\x3a\xbd\x5a\xea\xdc\xd0\x20\x65\xc7\x0a\xa2\x77\x55\x6b\xd4\xaf\x31\x46\x51\xb6\x72\x94\x31\xf8\x68\xd0\x56\x85\x6b\xbf\xa1\x1e\x0e\xca\x5a\xa1\x76\x45\x69\x50\xa2\x76\x4a\xd4\x76\xb0\x38\x78\x04\xd7\x09\x81\x78\x03\x69\xc6\x80\xdc\xc7\x3b\xb6\x9b\x2c\xc7\x3b\x95\xa3\xb6\xf5\x3d\x00\x00\x25\x81\xf3\x38\x82\x9c\xc6\xdb\x80\x3e\xc0\x07\xf2\x00\x11\xd9\x04\x3c\x61\xf0\x84\xba\x30\x42\xcb\xb6\x29\xfa\x5e\x49\xff\xf4\x6c\xa4\x94\x06\x85\x43\x59\x08\x07\x2c\xde\x92\x1d\x0b\xb6\xf9\xe8\x94\xf2\x24\x39\x90\x43\x4e\x29\x19\xee\xf7\x0c\x99\xc8\x7d\x27\xff\x9e\xac\x45\x83\xf0\x31\xa0\xe1\x6d\x40\xfd\xcb\x8b\xd3\x17\x22\x4f\xe3\x3b\x4e\x26\x94\x44\x5b\x1a\xd5\x8d\x3d\x3e\x83\xdf\x9c\xbf\xbd\x98\xe3\xbb\x9f\x1d\xfe\xa1\xc8\x45\x8e\xa9\xd0\x91\x66\xb1\x34\xe8\x80\x91\x7b\x76\xc0\xcd\x82\x43\x29\x45\xad\x1e\xd1\xa9\x06\x21\x4e\xd9\x42\xc8\x7f\x77\x79\x7e\x3e\xfb\x77\x68\x1a\x65\xed\x50\x01\xbc\xdf\x65\xe9\xf5\x91\x9c\xa8\xeb\x76\x8f\xb2\x78\x32\x42\x3b\x7b\x3c\x95\xcf\x5f\x8e\xe1\xf3\x60\x50\x16\xbd\x51\xb3\xe4\xf4\xab\x41\x27\xa4\x70\x62\x3a\xf3\x5e\x0f\x84\xc6\x37\x37\x84\xce\x6d\x14\x43\x6e\xeb\x44\xd3\x79\x00\xd7\x64\x93\x51\x02\x3c\x8f\x06\x60\x96\x2e\x87\xe3\x01\x6c\x32\x0a\x24\x08\x6f\x81\x66\x9f\x3c\x00\x72\x4f\x42\xce\x08\xe4\x34\x0b\x49\xc4\x29\x59\x08\xfb\x27\x2f\xc5\x9f\x0c\x41\x5e\x3f\xd3\xa8\xdd\xeb\x7f\xf0\x50\x23\x9a\xe5\xf3\xf4\x17\x99\xaf\x7e\x07\x00\x00\xff\xff\x0f\xc7\x9f\x49\x17\x04\x00\x00")

func sql0020_applicationSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0020_applicationSql,
		"sql/0020_application.sql",
	)
}

func sql0020_applicationSql() (*asset, error) {
	bytes, err := sql0020_applicationSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0020_application.sql", size: 1047, mode: os.FileMode(511), modTime: time.Unix(1607014780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0030_userSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4f\x8b\xdb\x30\x10\xc5\xef\xfe\x14\x8f\xbd\x6c\x42\x37\x85\x96\x52\x0a\x7b\x72\xec\xc9\xae\xdb\xc4\xf6\xca\x56\xbb\x7b\x32\x22\x9a\xc6\x82\xd8\x32\x92\x4c\xf6\xe3\x97\xfc\x21\x7f\xe8\xad\xf4\xfa\xf4\x7e\xa3\xc7\xcc\x9b\xcd\xf0\xa1\x33\x1b\xa7\x02\x43\x0e\xd1\x6c\x86\xea\x65\x09\xd3\xc3\xf3\x3a\x18\xdb\xe3\x5e\x0e\xf7\x30\x1e\xfc\xce\xeb\x31\xb0\xc6\xae\xe5\x1e\xa1\x35\x1e\x47\x6e\x6f\x32\x1e\x6a\x18\xb6\x86\x75\x94\x08\x8a\x6b\x42\x1d\xcf\x97\x84\x6c\x81\xbc\xa8\x41\xaf\x59\x55\x57\x68\x8d\xb3\x1f\x47\xcf\xce\x4f\x22\x00\x30\x1a\x52\x66\x29\x4a\x91\xad\x62\xf1\x86\x1f\xf4\x86\x94\x16\xb1\x5c\xd6\xd8\x70\xdf\x38\xd5\x6b\xdb\x35\xe3\x68\xf4\x64\xfa\x70\x40\xd6\x8e\x55\x60\xdd\xa8\x80\x3a\x5b\x51\x55\xc7\xab\xf2\xf0\x45\x2e\x97\xcb\x33\x9c\x48\x21\x28\xaf\x9b\xb3\xe5\x08\x8f\x83\xfe\x77\x78\x6b\x37\xa6\xc7\xcf\x58\x24\xcf\xb1\x98\x7c\xfa\xfc\x6d\x7a\x41\x65\x9e\xbd\x48\x3a\xfa\x06\xe5\xfd\xce\x3a\xdd\xb4\xca\xb7\x38\x98\xbf\x7e\x99\x3e\xec\x9f\x6e\xdf\xf9\x7d\x30\x8e\xfd\x4d\x9a\xd3\x08\x67\x7f\x9b\x2d\xe3\x7b\x55\xe4\xf3\x93\xc4\xae\x33\xde\x1b\xdb\xfb\x6b\xd9\xd9\x2d\xdf\x08\x1d\x07\xa5\x55\x50\x47\x2d\x9a\x3e\x46\xe7\x83\x88\xec\xe9\x89\xc4\x69\x09\x4d\x30\x1d\xfb\xa0\xba\x21\x02\xe6\xb4\x28\x04\x41\x96\xe9\xde\x58\xe4\x57\x87\x8a\x80\x45\x21\x40\x71\xf2\x0c\x51\xfc\x8a\x00\x7a\xa5\x44\xd6\x84\x52\x14\x09\xa5\x52\xd0\x5f\x13\x27\x77\x97\x45\xdf\xed\x13\x5c\x77\x2c\xb5\xbb\xfe\x3f\xb4\x2c\x15\x45\x79\xea\xd8\x25\xec\x63\xf4\x27\x00\x00\xff\xff\x83\xd1\x4f\xc8\xce\x02\x00\x00")

func sql0030_userSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0030_userSql,
		"sql/0030_user.sql",
	)
}

func sql0030_userSql() (*asset, error) {
	bytes, err := sql0030_userSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0030_user.sql", size: 718, mode: os.FileMode(511), modTime: time.Unix(1607014793, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0040_access_tokenSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcd\x8e\x9b\x30\x14\x85\xf7\x7e\x8a\xa3\xd9\x0c\x51\x9b\xbe\xc0\xac\x18\xb8\x49\x69\x09\x50\x63\xab\x99\x15\x42\x70\x35\xb1\x66\xf8\x91\x6d\x3a\x79\xfc\x8a\x40\xd3\x9f\x54\xea\xa6\x5b\x9f\x7b\x7c\x3e\x9d\x7b\xb7\x5b\xbc\xeb\xcc\xb3\xad\x3d\x43\x8f\x62\xbb\x45\xf9\x25\x85\xe9\xe1\xb8\xf1\x66\xe8\x71\xaf\xc7\x7b\x18\x07\x3e\x73\x33\x79\x6e\xf1\x76\xe2\x1e\xfe\x64\x1c\x16\xdf\x3c\x64\x1c\xea\x71\x7c\x35\xdc\x8a\x48\x52\xa8\x08\x2a\x7c\x4c\x09\xc9\x0e\x59\xae\x40\xc7\xa4\x54\x25\x4e\xc6\x0e\x1f\xea\xa6\x61\xe7\x2a\x3f\xbc\x70\xef\x02\x01\x00\xa6\x85\xd6\x49\x8c\x42\x26\x87\x50\x3e\xe1\x33\x3d\x21\xa6\x5d\xa8\x53\x85\x67\xee\x2b\x5b\xf7\xed\xd0\x55\xd3\x64\xda\x60\xf3\xfe\x62\x69\x2c\xd7\x9e\xdb\xaa\xf6\x50\xc9\x81\x4a\x15\x1e\x8a\x4b\x54\xa6\xd3\xf4\x6a\x8e\xb4\x94\x94\xa9\xea\x3a\xb2\x98\xa7\xb1\xbd\x35\xff\xcb\xe3\xd8\x56\x2b\xe8\x8a\xf0\x5a\x9b\xce\xe1\x53\x99\x67\xd7\xe4\x45\xe1\xf3\x68\x2c\xbb\xdf\xfe\x5f\x14\xcb\xdf\x86\x97\x3f\x92\x7f\x28\xad\xb1\xdc\xf8\x6a\xb2\x06\x8a\x8e\x6a\x79\xde\xe5\x92\x92\x7d\x76\xa9\x24\x58\x19\x36\x90\xb4\x23\x49\x59\x44\x6b\xa7\xb3\xe0\x82\x59\xc9\x33\xc4\x94\x92\x22\x44\x61\x19\x85\x31\x89\xcd\x83\x10\xd7\xa5\xc8\x64\xbf\x27\xb9\x16\x50\x79\xd3\xb1\xf3\x75\x37\x0a\xe0\x91\xe6\x28\xe8\x22\x9e\x07\xf3\xec\x2f\xcb\x12\x17\x1c\x50\x18\x7d\x84\xcc\xbf\x0a\x80\x8e\x14\x69\x45\x28\x64\x1e\x51\xac\x25\xdd\xfc\x1c\xdc\xfd\x2c\xfb\x6e\x46\xf9\xf5\xde\xe2\xe1\xad\xff\x0f\x17\x17\xcb\xbc\x58\xef\xed\x16\xfa\xe1\x7b\x00\x00\x00\xff\xff\xa4\x85\x35\x8d\xe1\x02\x00\x00")

func sql0040_access_tokenSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0040_access_tokenSql,
		"sql/0040_access_token.sql",
	)
}

func sql0040_access_tokenSql() (*asset, error) {
	bytes, err := sql0040_access_tokenSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0040_access_token.sql", size: 737, mode: os.FileMode(511), modTime: time.Unix(1607014861, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0100_optionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x4e\x83\x40\x10\x86\xef\xfb\x14\xff\xad\x10\x8b\x07\x13\xbd\xf4\x44\xcb\x36\xa2\x08\x75\x01\x63\x4f\x66\xc3\x4e\x64\x92\x76\xd9\x74\xc1\xfa\xf8\xa6\x50\x0d\x0f\xe0\x75\xe6\xfb\x66\x92\x2f\x8a\x70\x73\xe4\xcf\x93\xee\x09\xb5\x13\x51\x84\xf2\x35\x03\x5b\x78\x6a\x7a\xee\x2c\x16\xb5\x5b\x80\x3d\xe8\x9b\x9a\xa1\x27\x83\x73\x4b\x16\x7d\xcb\x1e\x93\x77\x81\xd8\x43\x3b\x77\x60\x32\x62\xa3\x64\x5c\x49\x54\xf1\x3a\x93\x48\xb7\xc8\x8b\x0a\xf2\x3d\x2d\xab\x12\x2d\x9f\xba\xdb\xce\x5d\x0c\x1f\x08\x00\xd0\x83\x61\xb2\x0d\x7d\xb0\x41\x5d\xa7\xc9\x48\xe7\x75\x96\x41\xc9\xad\x54\x32\xdf\xc8\xab\xf6\x4b\xfa\x80\x4d\xb8\x1c\x65\xab\x8f\x84\xb7\x58\x6d\x1e\x63\x15\xdc\xdd\x3f\x84\x7f\xf6\xb4\xff\xd2\x87\x81\xf0\x54\x16\xf9\x7a\x1a\xec\x54\xfa\x12\xab\x3d\x9e\xe5\x3e\x98\x7d\x5e\x8e\x97\x42\x11\xae\x84\x98\xe7\x48\xba\xb3\xfd\x87\x20\x89\x2a\x76\xd7\x1c\xf3\x00\xab\x9f\x00\x00\x00\xff\xff\x8b\x95\xf3\x30\x7a\x01\x00\x00")

func sql0100_optionSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0100_optionSql,
		"sql/0100_option.sql",
	)
}

func sql0100_optionSql() (*asset, error) {
	bytes, err := sql0100_optionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0100_option.sql", size: 378, mode: os.FileMode(511), modTime: time.Unix(1607014908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/0000_initialize.sql": sql0000_initializeSql,
	"sql/0010_audience.sql": sql0010_audienceSql,
	"sql/0020_application.sql": sql0020_applicationSql,
	"sql/0030_user.sql": sql0030_userSql,
	"sql/0040_access_token.sql": sql0040_access_tokenSql,
	"sql/0100_option.sql": sql0100_optionSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"0000_initialize.sql": &bintree{sql0000_initializeSql, map[string]*bintree{}},
		"0010_audience.sql": &bintree{sql0010_audienceSql, map[string]*bintree{}},
		"0020_application.sql": &bintree{sql0020_applicationSql, map[string]*bintree{}},
		"0030_user.sql": &bintree{sql0030_userSql, map[string]*bintree{}},
		"0040_access_token.sql": &bintree{sql0040_access_tokenSql, map[string]*bintree{}},
		"0100_option.sql": &bintree{sql0100_optionSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

