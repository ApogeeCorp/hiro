// Code generated by go-bindata.
// sources:
// ../../api/swagger/v1/hiro.swagger.yaml
// DO NOT EDIT!

package hiro

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ApiSwaggerV1HiroSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x73\xdb\xb8\x11\x7f\xe7\xa7\xd8\xa1\x3b\xd3\x76\xc6\x96\xaf\x99\xf6\x1e\xf4\xa6\x5e\xd2\x24\x9d\xe6\xec\x89\x73\xed\x43\x27\xa3\x40\xc0\x4a\xc4\x09\x04\x78\x00\x28\x45\xbd\xde\x77\xef\xec\x82\xa4\x28\x4b\x16\xe5\x58\x97\x74\xda\xbc\x24\x16\xb8\xd8\x3f\xd8\xdd\xdf\x2e\x96\xbc\x80\x09\xdc\xad\xc5\x62\x81\x1e\x9e\x8d\xbe\x81\xdf\x89\xd1\x72\x24\x46\x70\x53\xa1\x9d\xdc\xbe\xfe\x3d\x28\x9c\x6b\xab\xa3\x76\x16\xdc\x1c\x62\x81\x50\x68\xef\x60\x72\xfb\x7a\x94\x5d\x64\x17\xf0\xae\xd0\x01\x74\x80\x3a\xa0\x82\xb9\xf3\xb0\x40\x8b\x5e\x44\x6d\x17\x44\x04\xca\xc9\xba\x44\x1b\x05\xb3\x10\x56\x31\x8f\xb8\xa9\xb0\xd9\x33\xdb\xd0\x4a\x76\x01\xd2\x68\xb4\xf1\x3a\xa0\x5f\xa1\x1f\xc1\x1d\x22\x88\x4a\x5f\xbf\x7d\x31\x79\xfe\xe6\xc5\xa8\x4c\xdc\x4b\xe7\x11\xb4\x9d\x3b\x5f\x32\xc7\xa4\xc4\x9d\x2b\x11\x42\xdc\x18\x04\xeb\x22\x86\x71\x76\x01\x57\x49\xb5\xb9\x36\xd8\xe9\x37\xdb\xc0\x5b\x7c\xee\xe4\x25\xac\x0b\x2d\x0b\x10\xc6\xb8\x75\x80\x97\x3a\xbe\xaa\x67\xf0\x17\x23\x56\xce\xa3\x82\x37\xc2\x2f\x95\x5b\x5b\xd0\x36\xbb\x00\x00\x85\x41\x7a\x5d\x91\xbc\x30\x6a\x58\xa3\x67\xb6\xd6\x41\x29\x3e\xea\xb2\x2e\xc1\x68\x8b\x60\xd0\x2e\x62\x71\xc9\xba\xa2\x08\x48\x87\x86\x4a\xf3\x71\x90\xf1\x95\xc7\x18\x37\xa0\xf4\x7c\xde\xb0\x72\x15\x1f\x97\xb3\xaf\x55\x00\xc1\xd6\xf1\x11\x25\x13\x21\xff\xde\xd5\xf6\xef\xe8\x67\xf9\x25\xac\x75\x2c\x40\x40\xd0\x76\x51\x1b\xe1\xc1\xba\xda\x8e\xb2\x2c\x24\xff\x8d\x21\x7f\x36\xfa\x26\xcf\x82\x2c\xb0\xa4\x33\x00\xb8\x82\xbc\x88\xb1\xca\xb7\x7f\x86\x3c\xab\xbc\x53\xb5\xec\x08\x44\x55\x19\x2d\x59\x83\xeb\x1f\x83\xb3\xf9\xfe\xf2\xc7\xd2\xe4\x99\x74\x36\xd4\xe5\xa3\xb6\x5d\xad\xd7\xeb\x2b\xb2\xe3\xaa\xf6\x06\xad\x74\x0a\x55\x9e\x65\xe4\x3e\xe2\x12\x75\x34\x38\x86\xfc\x55\x13\x50\xc4\x62\x85\x3e\x68\x67\xc7\x90\xff\x61\xf4\x0d\x59\xb3\x73\xfa\x63\xf8\x77\x06\x00\xc9\xb3\x14\x5d\x95\x77\x2b\xad\x30\xf0\x89\x95\x18\x0b\xa7\x42\x8a\x13\x61\xc5\x82\x0e\x9d\xa3\xd5\xcd\x7e\x44\x19\xc3\xa8\x8b\x56\xeb\x22\x08\x8a\x09\x4f\x31\xc6\x3c\xc9\x3b\xa1\x70\xb5\x51\xe0\xac\xd9\xc0\x0c\xb7\x31\x3d\x13\x72\x09\x6e\x3e\xd7\x12\x13\x67\xa4\x90\x1e\x41\xc6\x3b\x2f\x60\x52\xc7\x02\x6d\x6c\x0c\x4f\xab\x6c\x55\x1d\x30\xc0\x0d\x3d\xe6\xec\x22\x5e\x62\x87\x96\xc5\xd2\x92\xf3\xfa\x5f\xdb\x15\x1d\x40\x61\x85\x56\xa1\x8d\x6c\x9b\x23\x1a\xa8\x84\x5c\x8a\x05\x85\x48\x44\x3f\x17\x12\x43\xab\xc1\x0b\xef\x9d\x6f\x7e\xbd\x2b\x90\x0f\x87\x85\x87\x28\xac\x12\x5e\xc1\xab\x77\xef\x6e\xe9\x57\xac\x03\x90\x27\x02\x44\x07\xda\x2a\x52\x04\x59\x46\xa8\xa5\xc4\x10\xc0\x79\x98\x0b\x6d\x6a\x8f\xcc\xae\x49\x7b\xe2\x28\x85\x31\x23\xe6\x3f\x73\x6a\xd3\x3e\xf1\x18\x2a\x67\x03\xc2\x5a\x1b\x43\xe7\xf6\xd7\xbb\x9b\xef\xb7\x61\x4c\x39\xa6\xed\x82\x79\xa5\xa0\x1e\xf3\xdf\x1f\x3e\x7c\xe0\xff\x7f\xe6\x7f\x01\xf2\x12\x43\x10\x0b\xcc\xc7\x90\x27\x87\xb1\x9b\xe6\xae\xb6\x2a\xbf\x6c\x89\x14\x46\xa1\x0d\xd1\xb0\xf7\x94\xc3\xe4\x4d\xfc\xa8\x43\x6c\xc8\x7e\xe9\xf8\x67\x51\x2c\x9a\x88\xb5\xa2\x6c\x83\x2d\xe7\xe7\x07\xe2\xaa\xf1\x1a\x99\x7a\xd3\xa6\x65\xa0\x0c\x43\x59\x7b\x1d\x37\xcf\x3b\x30\x64\xa6\xec\xd8\x64\x0c\x01\x1a\xe9\x4d\x6e\x7a\x96\xf8\xcf\x8d\x5b\x8f\x21\x17\x7c\xa8\xdf\x39\x85\x69\x79\xc7\xd9\x3f\x78\x33\x6e\x12\x73\x7c\x7d\x4d\x8f\x46\x0d\xfe\x19\x27\x85\xb9\x66\x7e\xd7\xed\x96\x86\x43\x74\x4b\x1c\xdc\x49\xd0\xc9\x84\x69\x4f\x90\xae\x4a\xb9\x9b\x74\x50\x1a\xad\xc4\xb1\x47\xa1\xc6\x90\xbf\x45\xa1\xba\xc5\x90\xdf\xa7\x5a\x7b\x1d\xc9\xba\xef\x3c\x52\xac\x30\x0c\x2b\x3d\xdf\x1c\xd8\xb2\x4d\xff\x5d\xde\xdb\xf5\x83\xb4\x0f\x4b\x38\xb0\xd1\x3b\xb3\xab\x39\x47\x02\xad\xee\x92\x3c\xc8\x74\x9f\x9e\x56\xf6\x58\xee\x3e\x6d\xb9\xfd\x83\xfe\x6f\x99\xc5\x86\x5b\xc8\xb3\x4c\xed\x06\xc7\xa4\x3d\xbd\xfd\x60\xcb\x27\xb6\x3b\x3a\x4a\x75\x0c\x81\x10\x41\x18\xb3\x01\x61\x39\xfc\x62\x21\xe2\x8e\xf1\x0c\x0b\x2c\x0a\xa4\xb0\x90\xa2\x2a\xdf\x89\x3d\xce\x99\xb4\x54\x79\x2a\x2b\x51\x63\x18\x43\x63\x84\x56\xad\xf7\xef\x6b\x43\xf9\xbc\x55\x47\xe5\x1d\x59\xc3\x38\x44\xaf\xed\xa2\x5d\xe6\x3c\x3a\x85\x13\x11\x0e\xf0\x0a\xa6\x5e\x1c\xe3\x55\x7b\x03\x73\xaf\xd1\xaa\x47\xb1\x05\x20\x57\xde\x58\xb3\x19\x43\xf4\x35\x66\xfb\xfc\x4f\x31\xa0\xf7\x68\xc8\x0e\x94\x1e\x63\x38\x89\x6b\x43\xbb\xc7\x51\x78\x2f\x36\xdb\x55\x1d\xb1\xec\x31\x04\xf8\x8d\xc7\xf9\x18\xf2\x8b\xeb\x5e\x9c\x5d\xdf\x31\xb3\x76\x17\xe7\xfb\xd4\xe8\x39\x46\x3d\xe0\xa4\x84\xf4\xbc\x01\xda\x0d\x04\xd9\x56\x58\x17\x50\x3a\xab\xf6\x35\xa4\xaa\xb3\x40\xbf\x35\x3a\x50\xa9\xfe\x6c\xf2\x2a\xf4\xa5\x66\x91\xa7\x1d\x74\x8f\x1e\x44\x48\x08\xf8\xe8\x53\x3f\xe8\x6e\xc9\x80\xa2\xa6\x6d\x25\x3b\xac\x08\x53\x51\x41\x27\x5b\x43\x14\x65\x35\x18\xb6\x4d\x79\x84\x5c\x89\x88\x57\xb4\xaf\x83\xa0\x4a\x9d\x20\x32\x51\x9d\x45\x60\x89\x51\x28\x11\xc5\x56\xdc\xc1\x00\x7c\x23\xaa\x9c\xba\x8e\x49\x0f\xcc\x0f\x01\xde\x0e\x92\x79\xee\xec\x9b\x86\x3f\x24\xac\x2b\xc4\xaa\x17\x26\xb0\x12\x5e\xbb\x3a\xdc\xaf\x30\x67\x81\xba\xad\x2e\x67\x40\xbb\x1e\xb3\x33\x03\xde\xe3\x38\x3f\x11\xf3\x7a\xc2\x4e\x87\x3d\x5e\x3c\xc2\x35\x35\xad\xc9\xcd\x4c\x3c\x68\x03\xda\xba\x1c\xc3\x3f\xf3\x35\xd2\x7d\x27\xb7\x22\xea\x15\xd2\x5f\xa5\x90\x85\xb6\x98\xbf\xdf\x41\xdc\xe9\x12\x37\xc7\xcd\x6a\xa3\xac\xd9\x00\x4b\xdc\x0c\x28\x71\x10\x66\x0e\xc6\xfe\xed\x96\xb2\xdd\xbc\xf0\xc2\xc6\xa1\x7d\x2f\x99\xa8\xcb\x6c\xaf\x1f\xc4\xb3\x49\xdb\xf8\xed\x86\x03\xb5\x02\x1e\x95\xf6\xd4\x23\xd3\xfe\xf3\xc0\x1a\xf4\x01\xa1\xf6\xfa\x2b\xdc\x3d\x08\x77\x6f\xa9\xbf\x3c\x80\x73\xb4\x1e\xd2\xcc\xa4\x57\x89\x66\x82\x2e\x92\x5b\x70\xeb\x35\x97\x5f\x01\xed\xbf\x09\xd0\x9e\x94\xfb\x5f\xd3\x64\x2f\x4d\x7e\xa0\x8b\xd3\xa1\x76\x20\x5d\xc1\x9a\xf9\x41\x65\x44\x24\x91\x5f\x28\x23\x8c\x5b\xe8\xa3\xb1\xc4\xba\x32\xd5\x50\xf8\x88\x10\xd6\xce\xab\x29\x7e\xac\xb4\xc7\x30\xe4\x97\x80\xfe\xb7\xa1\xdb\x05\xbc\x4b\x9c\x10\xa6\xc7\x3c\x64\x9c\x5c\xa2\x9a\xd6\x36\x6a\x33\x68\x94\x90\xd2\xd5\x36\xd2\x1d\x34\xed\x03\xde\x07\xb1\xd0\x01\xfa\x5c\x3f\x41\x11\xbe\x5f\x0f\x69\x10\x76\xaf\xe1\x4f\xab\x5f\x5f\xb3\x77\x40\xe0\x63\x8b\x1c\xfe\x54\x63\x88\xef\xe8\xd2\x76\x20\x8b\xdb\x91\xd9\x0d\x77\x79\x3e\x11\xa7\x2b\x5e\xea\xf1\x79\x7c\xaa\x6a\xd2\xae\xd7\xcf\x0f\x4c\x3f\xe7\xc6\xad\xc3\x08\x26\xc6\x34\xac\x2e\x01\x3f\x4a\xac\x62\x3f\x5b\xfb\x52\x9c\x4d\x46\x5e\xd5\x01\x47\xf0\xb7\xfb\x8f\x79\xc4\x8f\x8a\xca\x6e\x3b\xd1\xad\x6d\x33\xe9\x9c\xd7\xc6\x6c\x78\x28\x6b\x99\x45\x80\x19\xce\x9d\x4f\xd3\xd0\x94\xc3\xa3\x43\x62\xf9\xc2\x42\x5a\x51\x55\x8f\x11\xcb\x2a\x86\x34\xfc\xa4\x2c\xe2\xdd\xfd\xf4\x1a\x9d\x0d\xd7\xd2\xfd\x79\x10\xd1\x86\xfa\xf2\x1d\x5f\x3d\xae\x31\x4f\x30\x78\x09\x79\x73\xfb\xa7\x3f\x57\xe8\xf5\x7c\x43\x7f\x69\xbb\xd2\x91\xfb\x75\x72\xea\x54\x3a\xc5\x3f\x3c\xce\x3d\x86\x62\x9a\xe6\x91\x6d\x0b\xdf\xb6\x47\xd3\x13\x27\x53\xb1\x3b\x80\x19\x1a\x67\x17\xd4\x4a\x0d\xe8\xdd\xab\x03\x43\x52\x7a\x15\xe3\x13\x04\x91\xbb\x07\x24\x38\xfe\x21\x4c\x0a\x0d\x0a\xba\x4e\xce\x50\x8f\x25\xdd\x71\x7f\x26\x65\xcf\x38\xe0\xa0\x92\x44\xce\x1b\x16\xda\x52\x6e\xdf\x95\xb8\x58\xa5\x37\x5d\x6d\x59\xf3\x18\x30\xa6\xbc\x1e\x30\xf4\xb4\xb2\x99\x04\x6f\x8b\xe5\x25\x94\xae\x09\xe6\xd0\xb0\x80\x9f\x6a\x2d\x97\x66\xe8\xaa\x77\x0c\x2b\xc9\xa8\xa9\x2c\x84\x31\x68\x17\x47\x0f\xa2\x5a\x4a\x64\x72\xe8\xc8\x3b\xf7\x92\xd5\x03\x4a\xec\x0a\x9a\xa6\x97\x58\x8f\x95\x97\x76\x3d\x46\xec\x36\xa5\xad\xb3\x9c\xa5\x77\xcf\xfe\xf4\x6d\x97\x9c\x9c\xe7\xd3\x16\xdc\x8e\xa9\x63\xeb\x72\x96\x7a\xb9\x0e\x0a\xd3\x15\x87\x35\x49\xb8\x29\xbb\xb7\x1f\xf0\xe0\x78\x4f\x54\xd5\xb4\xf6\xfa\xd4\x24\xad\xbd\x7e\x9c\xb9\x87\x6e\xb6\xed\x25\x7a\x48\x70\xff\xb2\xfd\x74\xa9\x21\x8a\x78\x34\xa2\x98\x80\x13\x28\x15\xae\xd8\x53\x81\x54\x85\x75\x81\xb6\xd3\x81\xba\x37\xe9\xca\xca\x60\x1c\xc2\xf1\xcf\xda\xe4\x64\x00\x13\x2e\xb3\x0f\x35\x10\xf9\xa4\x37\x15\x0e\xe0\xb1\x22\xa8\xb0\x11\x3c\xae\xdc\x52\xcc\x0c\xb6\x8f\x1a\xbd\x9b\x6f\x05\xba\x0b\x03\xbb\xa2\xed\x2c\xaa\xda\x57\x2e\x60\x00\xa3\x97\x08\xa5\x58\x68\xc9\xad\x05\x18\x6d\x97\x67\xbc\x6d\x9f\x58\x83\x75\x08\x75\x7b\xf9\x39\xcc\x88\x1c\xd9\x7e\x52\xc1\x00\x46\x5d\x05\x6f\x53\x27\x97\x86\xc3\x01\xf6\x7f\x56\x59\xb9\xa0\x6e\x59\xaf\x45\xe8\x8e\x71\x88\x7b\x7a\x63\x52\x87\xa3\xe9\x48\x40\x65\x15\xaa\x36\xc4\x5a\xaf\x9d\xe6\xa0\x16\x66\x9b\x37\x76\xd4\x25\x29\xea\x80\xe3\xa6\xd7\x3b\xbd\xff\x62\xa5\x5e\x1a\xa1\xcb\xa1\xfb\x12\xdf\x08\x1a\x73\x3e\xb1\x46\xa7\x7d\xaa\xdf\x9a\x4b\x83\xc2\x52\x3f\x5e\xd1\xd5\x4d\x3b\xa5\xa5\x30\x4f\x2a\xda\x0c\x1c\x83\xf8\x96\x94\x23\x5a\xb9\xc5\xb9\xcb\x76\xf3\xaf\xab\xe1\xe7\x46\xe0\xbb\xd4\xa6\x1f\x42\xdf\xe6\x51\x1f\x78\x67\xde\xad\x29\x99\xd2\xc0\x32\xb4\x04\xf7\x3e\x5b\x41\x75\xee\x09\x66\x23\x69\x18\x55\x3f\x03\xb2\xfd\xba\x80\xb3\x7b\xfd\xde\x67\x8d\x56\xfa\x4d\x15\xb7\xa7\xcf\x3b\xce\xd2\x37\xb7\x0c\x0f\x65\x65\xfb\xec\x4b\xa6\x65\xab\xc3\x5e\x62\xb6\x0f\xfe\xc7\x12\x53\x7a\x8c\x87\xf3\x92\x3f\x10\xd8\x8e\x50\x9a\xae\x27\xbd\x4d\x0b\xe8\x57\x5a\x36\x37\x8c\x54\x0c\xf4\xc2\xb6\x9f\x17\xb6\x29\x7b\xce\xd4\xe4\xf7\x66\x3a\x9e\x39\x33\x9f\x3c\xc4\x68\x14\x7b\xd4\xf4\x22\x55\xec\xde\xf4\xa2\x9b\x45\x98\x85\xf3\x3a\x16\xe5\x70\xdd\xe8\x48\x4f\x96\xfa\x8a\x6f\x56\x97\x90\xbf\xdd\xb9\x62\x1d\x79\x77\xf9\x67\x11\xf0\xdb\x3f\x82\x17\x6b\x7e\x81\xd2\x7c\x3a\x49\x3b\x4e\x81\x83\xd3\x42\xb9\x39\xbf\xb3\x4e\x34\x4f\x05\x22\x96\xbc\xc5\xa1\xa7\x67\xd3\x1b\x51\x1d\x4a\xa5\x37\xa2\xa2\xdb\x91\xa0\x82\xa6\x25\x14\x22\x14\xbd\x80\x39\x90\x1e\x42\x29\x9d\xc6\x34\xb7\xdb\x44\xc9\x76\x34\x6a\xc9\x33\x80\xdb\xfb\x03\xe7\xfb\x89\x1c\x93\xf4\x52\x54\xd4\x33\x26\x5b\x80\xdb\xb4\x5e\xd5\xa5\xb5\xf4\x79\x1e\x61\x59\x97\x21\x4f\xd1\x71\xa7\x13\xbc\xd7\x07\xee\x1d\x6c\x06\xf0\xb2\xf7\xda\xfa\x93\x6d\x48\xef\xbe\xbf\x8c\x0d\xbb\x09\xb7\x33\x51\xee\xa6\x90\xe9\x43\x80\xa9\xf4\xa8\xd2\xd7\x76\x61\x7f\x36\x79\x09\x79\x3b\xb7\xca\xdf\x67\x59\x25\x62\xc1\x62\xaf\xbb\xef\x50\xc6\xf0\xf3\x2f\xbc\xd0\xfb\xa2\xa5\x5d\xe3\xae\xa8\xfd\xd1\x0c\x59\xbb\xdf\xa9\x7a\xb5\xbf\x5a\xa0\xa6\xdf\xff\x09\x00\x00\xff\xff\xd7\xe2\x12\x66\x84\x2f\x00\x00")

func ApiSwaggerV1HiroSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_ApiSwaggerV1HiroSwaggerYaml,
		"../../api/swagger/v1/hiro.swagger.yaml",
	)
}

func ApiSwaggerV1HiroSwaggerYaml() (*asset, error) {
	bytes, err := ApiSwaggerV1HiroSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../api/swagger/v1/hiro.swagger.yaml", size: 12164, mode: os.FileMode(420), modTime: time.Unix(1608590373, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../api/swagger/v1/hiro.swagger.yaml": ApiSwaggerV1HiroSwaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"api": &bintree{nil, map[string]*bintree{
				"swagger": &bintree{nil, map[string]*bintree{
					"v1": &bintree{nil, map[string]*bintree{
						"hiro.swagger.yaml": &bintree{ApiSwaggerV1HiroSwaggerYaml, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

