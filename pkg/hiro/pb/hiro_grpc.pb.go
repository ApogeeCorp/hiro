// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HiroClient is the client API for Hiro service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HiroClient interface {
	AudienceGet(ctx context.Context, in *AudienceGetRequest, opts ...grpc.CallOption) (*Audience, error)
}

type hiroClient struct {
	cc grpc.ClientConnInterface
}

func NewHiroClient(cc grpc.ClientConnInterface) HiroClient {
	return &hiroClient{cc}
}

func (c *hiroClient) AudienceGet(ctx context.Context, in *AudienceGetRequest, opts ...grpc.CallOption) (*Audience, error) {
	out := new(Audience)
	err := c.cc.Invoke(ctx, "/hiro.Hiro/AudienceGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HiroServer is the server API for Hiro service.
// All implementations must embed UnimplementedHiroServer
// for forward compatibility
type HiroServer interface {
	AudienceGet(context.Context, *AudienceGetRequest) (*Audience, error)
	mustEmbedUnimplementedHiroServer()
}

// UnimplementedHiroServer must be embedded to have forward compatible implementations.
type UnimplementedHiroServer struct {
}

func (UnimplementedHiroServer) AudienceGet(context.Context, *AudienceGetRequest) (*Audience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AudienceGet not implemented")
}
func (UnimplementedHiroServer) mustEmbedUnimplementedHiroServer() {}

// UnsafeHiroServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HiroServer will
// result in compilation errors.
type UnsafeHiroServer interface {
	mustEmbedUnimplementedHiroServer()
}

func RegisterHiroServer(s grpc.ServiceRegistrar, srv HiroServer) {
	s.RegisterService(&_Hiro_serviceDesc, srv)
}

func _Hiro_AudienceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudienceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiroServer).AudienceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiro.Hiro/AudienceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiroServer).AudienceGet(ctx, req.(*AudienceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hiro_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiro.Hiro",
	HandlerType: (*HiroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AudienceGet",
			Handler:    _Hiro_AudienceGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hiro.proto",
}
