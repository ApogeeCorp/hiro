// Code generated by go-bindata.
// sources:
// sql/0000_initialize.sql
// sql/0010_options.sql
// sql/0020_application.sql
// sql/0030_user.sql
// DO NOT EDIT!

package timescale

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sql0000_initializeSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xc1\x6e\xe3\x36\x14\xbc\xf3\x2b\x06\xae\x01\x59\x88\x05\xec\xb5\x35\xf6\xa0\x28\x8c\x2b\xc0\x91\x5b\x49\x6e\x02\xac\x77\x0d\xae\xf4\x22\x11\x90\x48\xad\x48\x25\x71\xbf\xbe\xa0\x15\xef\x3a\x6d\xdc\xfa\xd0\x8b\x69\xe2\x0d\xe7\xcd\x0c\xa9\x17\x04\xb8\x6a\x65\xd5\x0b\x4b\xd8\x74\x2c\x08\x90\xfd\xbe\x82\x54\x30\x54\x58\xa9\x15\xbc\x4d\xe7\x41\x1a\xd0\x0b\x15\x83\xa5\x12\xcf\x35\x29\xd8\x5a\x1a\x8c\xe7\x1c\x48\x1a\x88\xae\x6b\x24\x95\x2c\x4a\x79\x98\x73\xf0\x87\x9c\x27\x59\xbc\x4e\x10\xdf\x22\x59\xe7\xe0\x0f\x71\x96\x67\x98\x74\x55\xd1\xef\x3b\xab\x27\x8b\xff\x84\x0e\x4a\x14\x05\x29\x7b\x01\xb4\x36\x56\xf7\x74\x01\xb0\xd3\xc6\x56\xd2\x5c\x8e\xdc\x59\xdd\xe9\x46\x57\xfb\x0b\x8e\x58\xd9\x92\x29\x44\x43\xe5\xd7\x09\xa2\x30\x8b\xc2\x1b\xbe\x60\xec\x34\xe3\xcc\x0a\x4b\x2d\x29\x7b\x4d\x95\x54\x47\xc6\x75\x8a\x94\xff\xb6\x0a\x23\x8e\xdb\x4d\x12\xe5\x8e\x7b\xe8\x4a\x61\x69\x77\xe0\xb4\xa2\xed\x66\x3e\x4b\x79\xbe\x49\x93\x0c\x79\x1a\x2f\x97\x3c\x45\x98\x61\x3a\x65\x37\x3c\x5a\x85\x29\x67\x00\x50\xe8\x06\x39\x7f\xc8\xf1\xcb\x47\x7c\x1b\xb4\xa5\x9d\x2c\x49\xd9\x59\xbe\xdc\x85\xe9\xf2\x8f\x4f\x1f\x3e\xfb\x0b\x76\xcd\x97\x71\x72\x80\x27\xfc\xde\x21\xdd\xf2\xd3\x47\x8c\x21\xce\x0a\xdd\xcc\x91\xac\xef\x67\xbe\xbf\x60\xc0\xd8\xd4\x61\x16\x8c\x27\x37\x0b\x36\x9d\x62\x15\x26\xcb\x4d\xb8\xe4\xe8\x9a\xae\x32\xdf\x9a\x05\xfb\x37\x27\xa6\x19\x2a\xf9\xb8\x9f\x4d\x9e\x44\x33\xd0\xe4\x20\xf0\xc4\x8c\x93\x3b\x3a\x01\x82\x00\x3d\xb5\xfa\x89\x0c\xc6\xbb\x37\x98\x95\x52\x14\xbd\xb4\xb2\x80\x91\x95\x32\x3e\x1e\x7b\xdd\x42\xa0\x92\x4f\xa4\x60\x6c\x2f\x55\x85\x20\x60\xc0\x7d\x9c\xff\xfa\xe3\xd9\x50\x39\x71\xbc\xb3\x83\xd3\x8c\xaf\x78\x94\xe3\x58\x3b\x6a\xf1\x1d\xe2\xf5\x3f\x03\xfc\xf9\xa8\xa1\xd1\xcf\xd4\x17\xc2\x90\x81\xad\xe9\xb5\x07\x03\x26\xdf\x0b\xff\xa4\x3e\x94\xce\xf0\x02\xb7\xe9\xfa\xee\x8d\xb4\x93\x6e\x3d\x75\x8d\x28\x9c\x65\xb5\xb7\xb5\x73\x63\x6b\x61\x3d\x03\xa5\x2d\x04\x1a\xb2\x96\xfa\x39\xd4\xd0\x7e\x75\x6b\xbd\xef\x6a\x52\x33\x2f\xf0\xfc\x39\x74\x8f\x41\x95\xd4\x9b\xc2\x5d\x9d\xb7\xf3\x7c\x3c\x4b\x5b\x43\x9c\xc2\x9c\xf2\x71\x2b\xde\x4d\xa5\xa7\x8a\x5e\xba\xdd\xab\x8e\xa3\x87\x39\xbc\x4f\x5f\x44\xf0\xe7\x87\xe0\xe7\xed\x36\xd8\x7d\xbe\xf2\xe6\xf0\x02\xf7\x53\x49\xef\x8c\xc1\x1f\xf9\x9c\xf8\xb3\xbd\x6c\xcd\xab\x1e\x73\x10\x04\xf9\xe8\x82\xdd\x83\x5e\xa4\xb1\xd0\xea\x10\x73\x4d\xa2\x74\x86\xac\x90\x0d\xf4\xe3\xdf\xa2\x77\x2c\xed\x05\xea\xcf\x9a\xd9\x6e\x83\xab\xa9\x93\xef\x72\xf3\xbe\x6c\xb7\xc1\xb8\x79\xdf\xc9\x49\x5e\xce\x0a\xfb\xde\xee\xf8\x8a\x47\xd8\x51\xd5\xdb\xcf\xc2\xcd\xd0\x2c\x4f\xe3\x28\x47\x7c\x77\xb7\xc9\xc3\xeb\xd5\xd9\x41\xc0\x55\xf9\xb6\x72\xa3\x9f\xd5\xff\x30\x88\xff\x0a\x00\x00\xff\xff\x75\x79\x72\xcf\xda\x05\x00\x00")

func sql0000_initializeSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0000_initializeSql,
		"sql/0000_initialize.sql",
	)
}

func sql0000_initializeSql() (*asset, error) {
	bytes, err := sql0000_initializeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0000_initialize.sql", size: 1498, mode: os.FileMode(511), modTime: time.Unix(1593728948, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0010_optionsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8f\x41\x4e\xc3\x30\x10\x45\xf7\x3e\xc5\xdf\x15\x04\x39\x41\x57\x09\x19\x90\x51\xe4\xd0\xd8\x96\xb2\x43\x51\x33\xa2\x23\xb5\x8e\x85\x53\xc2\xf1\x51\x82\x41\x1c\x80\xe5\x8c\xfe\xff\x4f\xaf\x28\x70\x77\x91\xb7\xf7\x61\x66\xf8\xa8\x8a\x02\xf6\xd0\x40\x02\x12\x1f\x67\x99\x02\x76\x3e\xee\x20\x09\xfc\xc9\xc7\xeb\xcc\x23\x96\x13\x07\xcc\x27\x49\xf8\xee\xad\x21\x49\x18\x62\x3c\x0b\x8f\xea\xa1\xa3\xd2\x11\x5c\x59\x35\x04\xfd\x08\xd3\x3a\x50\xaf\xad\xb3\x98\xe2\x1a\x4e\x37\x0a\x00\x64\x44\xa5\x9f\x2c\x75\xba\x6c\xee\xb7\x4f\x18\x2e\x0c\x47\xbd\xdb\x3a\xc6\x37\xf9\xff\x31\x9c\xaf\x8c\x67\xdb\x9a\x4a\xdd\xee\xd5\x0f\xc1\x1b\x7d\xf0\x04\x6d\x6a\xea\xf3\xf4\xeb\x36\xd1\x9a\x5f\xd2\x7a\xaf\x95\xbf\x96\xf5\xb4\x84\x7f\xf0\xac\xbb\xf6\x25\x5b\x66\xda\xfe\x2b\x00\x00\xff\xff\x85\xcc\x48\x46\x4c\x01\x00\x00")

func sql0010_optionsSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0010_optionsSql,
		"sql/0010_options.sql",
	)
}

func sql0010_optionsSql() (*asset, error) {
	bytes, err := sql0010_optionsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0010_options.sql", size: 332, mode: os.FileMode(511), modTime: time.Unix(1593732486, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0020_applicationSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xc1\x6e\xdb\x3a\x10\xbc\xeb\x2b\x16\xb9\xd8\xc1\x8b\x81\x00\x0f\xe8\x25\x27\xc5\xa2\x13\xa2\xb6\xa4\xd0\x24\xe2\xb4\x28\x08\x56\xdc\xd8\x44\x25\x4a\x20\xa9\xba\xed\xd7\x17\x92\x1c\x47\x89\xdd\x53\x7b\xb3\x67\x67\x86\xe4\x70\xc4\xd9\x0c\xfe\xab\xcc\xd6\xa9\x80\x20\x9a\x68\x36\x83\xf5\xc3\x12\x8c\x05\x8f\x45\x30\xb5\x85\x89\x68\x26\x60\x3c\xe0\x0f\x2c\xda\x80\x1a\xf6\x3b\xb4\x10\x76\xc6\xc3\xa0\xeb\x48\xc6\x83\x6a\x9a\xd2\xa0\x8e\xe6\x8c\xc4\x9c\x00\x7f\xca\x09\xdc\xb1\x38\xe5\xb2\xff\xa9\x3c\x90\x54\xac\x60\x3a\x51\x6d\xd8\xd5\xce\xfc\xea\x95\xb2\xa8\x35\x4e\xae\x60\xe2\xf0\xd9\xa1\xdf\xc9\x50\x7f\x43\xdb\x01\x45\x69\xd0\x06\x59\x38\xd4\x68\x83\x51\xa5\x9f\x5c\xde\xbc\x71\x8f\xf3\x7c\x49\xe7\x31\xa7\x59\xfa\x7e\x8d\x3d\x7e\xed\x3c\xac\x0a\xe6\x7b\x6f\x5f\xa9\x62\x67\x2c\x76\x16\x47\x8f\xf8\x76\x49\x80\x2e\x20\xcd\x38\x90\x0d\x5d\xf3\xf5\x70\x88\xa2\xdf\x99\x9f\x46\x00\x00\x46\x83\x10\x34\x81\x9c\xd1\x55\xcc\x9e\xe0\x23\x79\x82\x84\x2c\x62\xb1\xe4\xb0\x45\x2b\x9d\xb2\xba\xae\x64\xdb\x1a\x3d\xbd\xbc\xea\x25\x85\x43\x15\x50\x4b\x15\x80\xd3\x15\x59\xf3\x78\x95\xc3\x23\xe5\xf7\xfd\x5f\xf8\x94\xa5\xa4\x5f\x33\x15\xcb\xe5\xd1\x2b\xcd\x1e\x5f\xf4\x6d\xa3\xff\x4a\x6f\x55\x85\xc0\xc9\x86\x1f\x59\x03\xae\xd1\x17\xce\x34\xfd\x85\x75\xe3\x01\x0d\x3f\x1b\x3c\x89\xf2\x70\x90\xe1\x0a\x8c\x3e\xe7\x76\x18\x7a\x2c\x1c\x86\x73\x84\xb2\xde\x1a\x2b\x5b\x67\x7c\x3f\xfd\xfc\x65\x80\x1d\x6a\xe3\xb0\x08\xa7\x93\xb2\xde\xd6\xed\x19\x5c\x95\x65\xbd\x47\x2d\xb7\x4e\xd9\xe0\x47\xa5\x7a\x21\xf4\x9d\x91\xa5\x79\xc6\x60\x2a\x04\x9a\xf2\xd3\x7c\xfe\xff\x70\x7d\x3d\xb0\x1b\x74\x95\xf1\xbe\xbb\xe2\xc3\x32\xd1\xa8\x15\x22\xa5\x0f\x82\x00\x4d\x13\xb2\x19\xd7\x41\xf6\xa9\x66\xe9\xdb\x8a\x74\xe0\x6b\x2b\xff\xa8\x1d\xb2\x3a\x51\x1f\xf3\xbd\x7a\x9b\xe6\xb8\xa4\x8c\xde\xdd\x11\x76\xe8\x84\xec\xce\xe7\x83\xaa\x9a\x08\xe0\x96\x2c\x32\x46\x40\xe4\x49\x47\x7c\xe7\x1d\x01\x2c\x32\x06\x24\x9e\xdf\x03\xcb\x1e\x23\x00\xb2\x21\x73\xc1\x09\xe4\x2c\x9b\x93\x44\x30\x72\xe2\x39\xbd\x78\x6d\xde\x45\xb7\x87\xf1\xdb\x90\xd4\x7b\xfb\x0f\x5e\x87\x84\x65\xf9\xe1\xcb\x1b\x6f\xf7\xe6\x77\x00\x00\x00\xff\xff\x0b\x79\xc4\x6e\x87\x04\x00\x00")

func sql0020_applicationSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0020_applicationSql,
		"sql/0020_application.sql",
	)
}

func sql0020_applicationSql() (*asset, error) {
	bytes, err := sql0020_applicationSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0020_application.sql", size: 1159, mode: os.FileMode(511), modTime: time.Unix(1594225230, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql0030_userSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xd1\x8e\xda\x3c\x10\x85\xef\xf3\x14\x47\x7b\x03\xe8\xff\x79\x02\xa4\x95\x02\x19\x76\xd3\x42\xcc\x1a\x5b\xb0\xad\xaa\xc8\x10\x97\x58\x22\x4e\x14\x3b\xa2\x8f\x5f\xe1\x04\xb6\x52\xb7\x7b\xd3\x5e\xfa\xcc\xf9\xce\x58\x63\xcf\x74\x8a\xff\x2a\x73\x6a\x95\xd7\x90\x4d\x34\x9d\x62\xfb\xb2\x82\xb1\x70\xfa\xe8\x4d\x6d\x31\x92\xcd\x08\xc6\x41\xff\xd0\xc7\xce\xeb\x02\x97\x52\x5b\xf8\xd2\x38\xf4\xdc\xd5\x64\x1c\x54\xd3\x9c\x8d\x2e\xa2\x05\xa7\x58\x10\x44\x3c\x5f\x11\xd2\x25\x32\x26\x40\xfb\x74\x2b\xb6\xe8\x9c\x6e\xdd\x38\x02\x00\x53\x40\xca\x34\xc1\x86\xa7\xeb\x98\xbf\xe2\x33\xbd\x22\xa1\x65\x2c\x57\x02\x27\x6d\xf3\x56\xd9\xa2\xae\xf2\xae\x33\xc5\x78\xf2\x7f\x40\x8e\xad\x56\x5e\x17\xb9\xf2\x10\xe9\x9a\xb6\x22\x5e\x6f\xb0\x4b\xc5\x73\x38\xe2\x0b\xcb\x28\x34\xcb\xe4\x6a\x75\xcf\xca\xd8\xee\xc6\x77\x4d\xf1\x57\xfc\xb9\x3e\x19\x0b\x41\x7b\x71\xb7\xf5\x85\x46\x39\x77\xa9\xdb\x22\x2f\x95\x2b\x83\x61\xd0\x75\x5b\x19\xe7\x4c\x6d\x5d\x50\xbf\x7e\xeb\xf5\x4a\x7b\x55\x28\xaf\xf0\x69\xcb\xb2\xf9\xe0\x6d\xeb\xef\xe6\xac\x7b\x29\x9a\xcc\xa2\xdb\x1c\x65\x96\xbe\x48\x42\x9a\x25\xb4\x0f\x03\xcc\xfb\x7b\xb0\x6c\x18\x67\x38\x4e\x66\x7f\xf6\xeb\x4a\x99\xf3\x9b\x7f\x3c\xb4\x9a\x3e\x3e\x8e\x42\x69\x34\xf9\x88\x6e\xca\xda\xea\xf7\xe9\x50\xca\x6d\x57\x1d\x74\xfb\x71\x88\xeb\x0e\xef\x47\xb8\xee\x10\xc8\xfb\xaf\xe1\xe9\xd3\x13\xf1\xe1\xad\x72\x6f\x2a\xed\xbc\xaa\x9a\x08\x98\xd3\x92\x71\x82\xdc\x24\x57\xe3\x2d\x2d\x02\x96\x8c\x83\xe2\xc5\x33\x38\xdb\x45\x00\xed\x69\x21\x05\x61\xc3\xd9\x82\x12\xc9\xe9\xb7\xb0\xf1\xc3\xdb\x57\x78\xb8\x36\xff\x75\x07\x92\xfa\x62\xff\xc1\x16\x24\x9c\x6d\x86\x1d\x08\xf7\x9c\xfd\x0c\x00\x00\xff\xff\x71\xe5\xcd\x8e\x68\x03\x00\x00")

func sql0030_userSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql0030_userSql,
		"sql/0030_user.sql",
	)
}

func sql0030_userSql() (*asset, error) {
	bytes, err := sql0030_userSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/0030_user.sql", size: 872, mode: os.FileMode(511), modTime: time.Unix(1594154906, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/0000_initialize.sql": sql0000_initializeSql,
	"sql/0010_options.sql": sql0010_optionsSql,
	"sql/0020_application.sql": sql0020_applicationSql,
	"sql/0030_user.sql": sql0030_userSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"0000_initialize.sql": &bintree{sql0000_initializeSql, map[string]*bintree{}},
		"0010_options.sql": &bintree{sql0010_optionsSql, map[string]*bintree{}},
		"0020_application.sql": &bintree{sql0020_applicationSql, map[string]*bintree{}},
		"0030_user.sql": &bintree{sql0030_userSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

