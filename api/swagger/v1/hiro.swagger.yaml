# A Swagger 2.0 (a.k.a. OpenAPI) definition of the hiro API.
#
# This is used for generating API documentation and the types used by the
# client/server. See api/README.md for more information.
#
# Some style notes:
# - This file is used by ReDoc, which allows GitHub Flavored Markdown in
#   descriptions.
# - There is no maximum line length, for ease of editing and pretty diffs.
# - operationIds are in the format "NounVerb", with a singular noun.

swagger: "2.0"
schemes:
  - "http"
  - "https"
produces:
  - "application/json"
consumes:
  - "application/json"
  - "application/x-www-form-urlencoded"

info:
  title: "Hiro API"
  version: "1.0.0"
  description: |
    This API provides the methods for managing hiro objects. This is not a user api
    and should only be used for back office management. 

    # Authentication

    Hiro uses OAuth 2.0 for authentication and authorization and is dependent the oauth package interfaces

    # Errors

    The API uses standard HTTP status codes to indicate the success or failure
    of the API call. The body of the response will be JSON in the following
    format:
    ```
    {
      "message": "object not found",
      "detail": [
        "user does not exist"
      ]
    }
    ```

tags:
  - name: "Audience"
    description: "Audience operations"
  - name: "Application"
    description: "Application operations"
  - name: "User"
    description: "User operations"
  - name: "Option"
    description: "Option operations for simple kv store of audience specific configiration data"   
  - name: "Asset"
    description: "Asset operations provide for the management of assets"
  - name: "Secret"
    description: "Secret options provide for the management of audience secrets"   
  - name: "Token"
    description: "Token operations"
  - name: "Session"
    description: "Session operations"

securityDefinitions:
  oauth:
    type: "oauth2"
    flow: "accessCode"
    authorizationUrl: "https://auth.server.local/oauth/authorize"
    tokenUrl: "https://auth.server.local/api/token"
    scopes:
      audience:read: "Read audiences"
      audience:write: "Create or modify audiences"
      application:read: "Read applications"
      application:write: "Create or modify applications"
      role:read: "Read user roles"
      role:write: "Create or modify user roles"
      user:read: "Read users"
      user:write: "Write or moditfy users"
      token:read: "Read access and request tokens"
      token:create: "Create access tokens"
      token:revoke: "Revoke access and request tokens"
      session:read: "Session read access"
      session:destroy: "Destory session values"
      asset:read: "Read assets"
      asset:write: "Write assets"

definitions:
  Audience:
    description: |
      An audience is essentially an API that applications and users can access. Audiences define permissions that
      are used to restrict applications and users (via roles) to resources provided to that audience.
    type: "object"
    properties: 
      id:
        description: "The audience id"
        type: "string"
        readOnly: true
      name:
        description: "The audience name"
        type: "string"
      slug:
        description: "The url friend audience name"
        type: "string"
        readOnly: true
      description:
        description: "The audience description"
        type: "string"
      secrets:
        description: "The audience secrets"
        type: "array"
        items:
          $ref: "#/definitions/Secret"
        readOnly: true
      token_algorithm:
        description: "The the signing token algorithm"
        type: "string"
        enum: ["RS256", "HS256"]
      token_lifetime:
        description: "The access token lifetime in nanoseconds"
        type: "integer"
      session_lifetime:
        description: "The access token lifetime in nanoseconds"
        type: "integer"
      permissions:
        description: "The audience permissions as scope"
        type: "array"
        items:
          type: "string"
      created_at:
        description: "The creation timestamp"
        type: "string"
        format: "date-time"
        readOnly: true
      updated_at:
        description: "The update timestamp"
        type: "string"
        format: "date-time"
        readOnly: true
      metadata:
        $ref: "#/definitions/Map"
    example: {
      "id": "HZUKGUv3ajmKEbKDCXQW2g",
      "name": "hiro",
      "slug": "hiro",
      "token_algorithm": "RS256",
      "token_lifetime": 3600000000000,
      "session_lifetime": 2592000000000000,
      "created_at": "2020-12-17 16:09:43",
      "updated_at": "2020-12-17 16:09:43"
    }

  Application:
    description: "Applications are api clients that have access to various audiences"
    type: "object"
    properties: 
      id:
        description: "The application id"
        type: "string"
      name:
        description: "The application name"
        type: "string"
      slug:
        description: "The url friend application name"
        type: "string"
        readOnly: true
      description:
        description: "The application description"
        type: "string"
      type:
        description: "The oauth client type"
        type: "string"
        enum: ["web", "native", "machine"]
      secret_key:
        description: "The api client secret key"
        type: "string"
      permissions:
        $ref: "#/definitions/Permissions"
      grants:
        $ref: "#/definitions/Grants"
      uris:
        description: "Authorized application and redirect uris"
        type: "array"
        items:
          type: "string"
          format: "uri"
      created_at:
        description: "The creation timestamp"
        type: "string"
        format: "date-time"
      updated_at:
        description: "The update timestamp"
        type: "string"
        format: "date-time"
      metadata:
        $ref: "#/definitions/Map"

  Role:
    description: "Roles define resource access to audiences by users"
    type: "object"
    properties: 
      id:
        description: "The role id"
        type: "string"
      audience_id:
        description: "The role audience_id"
        type: "string"
      name:
        description: "The role name"
        type: "string"
      slug:
        description: "The url friend role name"
        type: "string"
        readOnly: true
      description:
        description: "The role description"
        type: "string"
      permissions:
        $ref: "#/definitions/Permissions"
      created_at:
        description: "The creation timestamp"
        type: "string"
        format: "date-time"
      updated_at:
        description: "The update timestamp"
        type: "string"
        format: "date-time"
      metadata:
        $ref: "#/definitions/Map"

  Asset:
    description: "Assets are audience objects stored in the hiro instance"
    type: "object"
    properties:
      id:
        description: "The asset id"
        type: "string"
      audience_id:
        description: "The asset audience_id"
        type: "string"
      title:
        description: "The asset title"
        type: "string"
      filename:
        description: "The asset filename with extension"
        type: "string"
      mime_type:
        description: "The asset mime type"
        type: string
      description:
        description: "The asset description"
        type: "string"
      public:
        description: "If true the asset is publicly available"
        type: "boolean"
      created_at:
        description: "The creation timestamp"
        type: "string"
        format: "date-time"
      updated_at:
        description: "The update timestamp"
        type: "string"
        format: "date-time"
      metadata:
        $ref: "#/definitions/Map"

  User:
    description: "A user of the platform"
    type: "object"
    properties: 
      id:
        description: "The application id"
        type: "string"
      login:
        description: "The user login"
        type: "string"
      password_expires_at:
        description: "The user's password expiration"
        type: "string"
        format: "date-time"
      locked_until:
        description: "The user account is locked until this time"
        type: "string"
        format: "date-time"
      roles:
        description: "The users roles"
        type: "array"
        items:
          type: "string"
      permissions:
        $ref: "#/definitions/Permissions"
      created_at:
        description: "The creation timestamp"
        type: "string"
        format: "date-time"
      updated_at:
        description: "The update timestamp"
        type: "string"
        format: "date-time"
      metadata:
        $ref: "#/definitions/Map"

  RequestToken:
    description: |
      Oauth request tokens are used during various authentication and authorization flows. All tokens, except
      login tokens are one-time-use. Login tokens are allowed to be used unsuccessfully for n-times before the expire.
      login tokens that exceed attempts will lock the user account.
    type: "object"
    properties: 
      id:
        description: "The token id"
        type: "string"
      type:
        description: "The request token type"
        type: "string"
        enum: ["login", "session", "verify", "invite", "auth_code", "refresh_token"]
      audience_id:
        description: "The audience the token belongs to"
        type: "string"
      application_id:
        description: "The application the token belongs to"
        type: "string"
      user_id:
        description: "The optional user for the token"
        type: "string"
      scope:
        description: "The token scope"
        type: "array"
        items:
          type: "string"
      passcode:
        description: "The token passcode used for otp and password reset flows"
        type: "string"
      expires_at:
        description: "The token expiration, most tokes expire quickly"
        type: "string"
        format: "date-time"
      code_challenge:
        description: "The pkce code challenge for the flow"
        type: "string"
      code_challenge_method:
        description: "The pkce code challenge method for the flow"
        type: "string"
        enum: ["none", "S256"]
      login_attempts:
        description: "The number of attempts to use the login code"
        type: "integer"
      app_uri:
        description: "The application uri for the flow"
        type: "string"
        format: "uri"
      redirect_uri:
        description: "The redirect uri for the flow"
        type: "string"
        format: "uri"
      state:
        description: "The state passed to the redirect_uri when the flow is complete"
        type: "string"
      created_at:
        description: "The creation timestamp"
        type: "string"
        format: "date-time"

  AccessToken:
    description: "Access tokens represent revokable tokens created by the platform for various purposes like magic auth links"
    type: "object"
    properties: 
      id:
        description: "The token id"
        type: "string"
      issuer:
        description: "The uri of the host that issued the token"
        type: "string"
        format: "uri"
      audience_id:
        description: "The audience the token belongs to"
        type: "string"
      application_id:
        description: "The application the token belongs to"
        type: "string"
      user_id:
        description: "The user the token was issued to"
        type: "string"
      token_use:
        description: "The intended purpose of the token"
        type: "string"
        enum: ["access", "identity", "verify"]
      scope:
        description: "The token scope"
        type: "array"
        items:
          type: "string"
      claims:
        $ref: "#/definitions/Map"
      expires_at:
        description: "The token expiration, expired tokens are cleaned up periodically"
        type: "string"
        format: "date-time"
      revoked_at:
        description: "The token revocation time, revoked tokens are cleaned up periodically"
        type: "string"
        format: "date-time"
      created_at:
        description: "The creation timestamp"
        type: "string"
        format: "date-time"

  Session:
    description: "Sessions represent browser based sessions for authenticated users"
    type: "object"
    properties: 
      id:
        description: "The session id"
        type: "string"
      audience_id:
        description: "The audience the token belongs to"
        type: "string"
      user_id:
        description: "The user the token was issued to"
        type: "string"
      data:
        description: "The encrypted session data"
        type: "string"
      expires_at:
        description: "The session expiration, expired session are cleaned up periodically"
        type: "string"
        format: "date-time"
      revoked_at:
        description: "The session revocation time, session tokens are cleaned up periodically"
        type: "string"
        format: "date-time"
      created_at:
        description: "The creation timestamp"
        type: "string"
        format: "date-time"

  Secret:
    description: "Secrets are used by the oauth service for token signing and sessions"
    type: "object"
    properties: 
      id:
        description: "The secret it"
        type: "string"
      audience_id:
        description: "The audience id"
        type: "string"
      type:
        description: "The secret type"
        type: "string"
        enum: ["token", "session"]
      algorithm:
        description: "The token algorithm"
        type: "string"
        enum: ["HS256", "RS256"]
      key:
        description: "Base64 raw url encoded key data"
        type: "string"
      created_at:
        description: "The secret creation timestamp"
        type: "string"
        format: "date-time"
      expires_at:
        description: "The secret expiration timestamp"
        type: "string"
        format: "date-time"

  Map:
    description: "Map is a basic hash type"
    type: "object"
    additionalProperties:
      type: "object"

  Permissions:
    description: "Set is a map of string arrays representing scopes per audience"
    type: "object"
    additionalProperties:
      type: "array"
      items:
        type: "string"
  
  Grants:
    description: "Set is a map of string arrays representing grants per audience"
    type: "object"
    additionalProperties:
      type: "array"
      items:
        type: "string"
        enum: ["authorization_code", "client_credentials", "refresh_token", "password"]

  Error:
    description: "A common error response"
    type: "object"
    required: ["message"]
    properties:
      message:
        type: "string"
        description: "The base error message"
      detail:
        type: "array"
        description: "List of detailed error messages"
        items:
          type: "string"
          
paths:
  /audiences:
    head:
      description: "Return a count of audiences"
      operationId: "AudienceCount"
      tags: ["Audience"]
      responses:
        204:
          $ref: "#/responses/NoContent"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["audience:read"]
    get:
      description: "Query for audiences"
      operationId: "AudienceList"
      tags: ["Audience"]
      parameters:
        - $ref: '#/parameters/OffsetParam'
        - $ref: '#/parameters/LimitParam'
      responses:
        200:
          description: "ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Audience"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["audience:read"]
    post:
      description: "Createn a new audience"
      operationId: "AudienceCreate"
      tags: ["Audience"]
      consumes: ["application/json"]
      parameters:
        - name: "audience"
          in: "body"
          required: true
          schema:
            title: "AudienceCreateInput"
            type: "object"
            properties:
              name:
                description: "The audience name"
                type: "string"
              description:
                description: "The audience description"
                type: "string"
              token_algorithm:
                description: "The the signing token algorithm"
                type: "string"
                enum: ["RS256", "HS256"]
                default: "RS256"
              token_lifetime:
                description: "The access token lifetime in nanoseconds"
                type: "integer"
                default: 3600000000000
              session_lifetime:
                description: "The access token lifetime in nanoseconds"
                type: "integer"
                default: 2592000000000000
              permissions:
                description: "The audience permissions as scope"
                type: "array"
                items:
                  type: "string"
              metadata:
                $ref: "#/definitions/Map"
            required: ["name", "permissions", "token_algorithm", "token_lifetime", "session_lifetime"]
            example: {
              "name": "hiro",
              "token_algorithm": "RS256",
              "token_lifetime": 3600000000000,
              "session_lifetime": 2592000000000000,
            }
      responses:
        201:
          description: "created"
          schema:
            $ref: "#/definitions/Audience"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["audience:write"]
      
  /audiences/{audience_id}:
    parameters: 
      - name: "audience_id"
        in: "path"
        description: "The audience id"
        type: "string"
        required: true
    get:
      description: "Get an audience by id"
      operationId: "AudienceGet"
      tags: ["Audience"]
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Audience"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["audience:read"]
    patch:
      description: "Update audience by id"
      operationId: "AudienceUpdate"
      tags: ["Audience"]
      parameters:
        - name: "audience"
          in: "body"
          required: true
          schema: 
            title: "AudienceUpdateInput"
            type: "object"
            properties:
              name:
                description: "The audience name"
                type: "string"
              description:
                description: "The audience description"
                type: "string"
              token_algorithm:
                description: "The the signing token algorithm"
                type: "string"
                enum: ["RS256", "HS256"]
                default: "RS256"
              token_lifetime:
                description: "The access token lifetime in nanoseconds"
                type: "integer"
                default: 3600000000000
              session_lifetime:
                description: "The access token lifetime in nanoseconds"
                type: "integer"
                default: 2592000000000000
              permissions:
                description: "The audience update permissions"
                type: "object"
                properties: 
                  add:
                    description: "Permissions to add"
                    type: "array"
                    items:
                      type: "string"
                  remove:
                    description: "Permissions to remove"
                    type: "array"
                    items:
                      type: "string"
                  overwrite:
                    description: "If set all existing permissions will be removed"
                    type: "boolean"
              metadata:
                $ref: "#/definitions/Map"
            example: {
              "permissions": {
                add: ["metaverse"]
              }
            }
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Audience"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["audience:write"]
    delete:
      description: "Delete by id"
      operationId: "AudienceDelete"
      tags: ["Audience"]
      responses:
        204:
          $ref: "#/responses/NoContent"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["audience:write"]

  /options/{option_id}:
    parameters: 
      - name: "option_id"
        in: "path"
        description: "The option id"
        type: "string"
        required: true
    get:
      description: "Get an audience option by id"
      operationId: "OptionGet"
      tags: ["Option"]
      responses:
        200:
          description: "ok"
          schema:
            type: "object"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["audience:read"]
    put:
      description: "Update audience option by id"
      operationId: "OptionPut"
      tags: ["Option"]
      parameters:
        - name: "option"
          in: "body"
          required: true
          schema: 
            type: "object"
      responses:
        200:
          description: "ok"
          schema:
            type: "object"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["audience:write"]
    delete:
      description: "Delete option by id"
      operationId: "OptionDelete"
      tags: ["Option"]
      responses:
        204:
          $ref: "#/responses/NoContent"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["audience:write"]

  /secrets:
    post:
      description: "Create a new secret for the audience"
      operationId: "SecretCreate"
      tags: ["Secret"]
      parameters:
        - name: "application"
          in: "body"
          required: true
          schema: 
            title: "SecretCreateInput"
            type: "object"
            properties:
              audience_id:
                description: "The audience id for the secret"
                type: "string"
              type:
                description: "The secret type"
                type: "string"
                enum: ["token", "session"]
              algorithm:
                description: "The token algorithm"
                type: "string"
                enum: ["HS256", "RS256"]
              key:
                description: |
                  Base64 raw url encoded key data, if not provided a random key will be generated.
                type: "string"
              expires_at:
                description: "The secret expiration timestamp"
                type: "string"
                format: "date-time"
            required: ["type", "algorithm"]
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Secret"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["audience:write"]

  /secrets/{secret_id}:
    parameters: 
      - name: "secret_id"
        in: "path"
        description: "The secret id"
        type: "string"
        required: true
    delete:
      description: "Delete a secret from the audience by id"
      operationId: "SecretDelete"
      tags: ["Secret"]
      responses:
        204:
          $ref: "#/responses/NoContent"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["audience:write"]

  /audiences/{audience_id}/roles:
    parameters: 
      - name: "audience_id"
        in: "path"
        description: "The audience id"
        type: "string"
        required: true
    head:
      description: "Return a count of roles"
      operationId: "RoleCount"
      tags: ["Role"]
      responses:
        204:
          $ref: "#/responses/NoContent"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["role:read"]
    get:
      description: "Query for roles"
      operationId: "RoleList"
      tags: ["Role"]
      parameters:
        - $ref: '#/parameters/OffsetParam'
        - $ref: '#/parameters/LimitParam'
      responses:
        200:
          description: "ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Role"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["role:read"]
    post:
      description: "Createn a new role"
      operationId: "RoleCreate"
      tags: ["Role"]
      consumes: ["role/json"]
      parameters:
        - name: "role"
          in: "body"
          required: true
          schema:
            title: "RoleCreateInput"
            type: "object"
            properties:
              name:
                description: "The role name"
                type: "string"
              description:
                description: "The role description"
                type: "string"
              permissions:
                $ref: "#/definitions/Permissions"
              metadata:
                $ref: "#/definitions/Map"
            required: ["name"]
            example: {
              "name": "hiro:user",
              "permissions": {
                "hiro": ["user:read"]
              }
            }
      responses:
        201:
          description: "created"
          schema:
            $ref: "#/definitions/Role"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["role:write"]
      
  /audiences/{audience_id}/roles/{role_id}:
    parameters:
      - name: "audience_id"
        in: "path"
        description: "The audience id"
        type: "string"
        required: true
      - name: "role_id"
        in: "path"
        description: "The role id"
        type: "string"
        required: true
    get:
      description: "Get an role by id"
      operationId: "RoleGet"
      tags: ["Role"]
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Role"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["role:read"]
    patch:
      description: "Update role by id"
      operationId: "RoleUpdate"
      tags: ["Role"]
      parameters:
        - name: "role"
          in: "body"
          required: true
          schema: 
            title: "RoleUpdateInput"
            type: "object"
            properties:
              name:
                description: "The role name"
                type: "string"
              description:
                description: "The role description"
                type: "string"
              permissions:
                type: "object"
                properties: 
                  add:
                    $ref: "#/definitions/Permissions"
                  remove:
                    $ref: "#/definitions/Permissions"
                  overwrite:
                    description: "Remove all existing permissions"
                    type: "boolean"
              metadata:
                $ref: "#/definitions/Map"
            example: {
              "permissions": {
                "add": {
                  "hiro": "profile"
                }
              }
            }
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Role"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["role:write"]
    delete:
      description: "Delete by id"
      operationId: "RoleDelete"
      tags: ["Role"]
      responses:
        204:
          $ref: "#/responses/NoContent"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["role:write"]

  /assets:
    head:
      description: "Return a count of assets"
      operationId: "AssetCount"
      tags: ["Asset"]
      responses:
        204:
          $ref: "#/responses/NoContent"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["asset:read"]
    get:
      description: "Query for assets"
      operationId: "AssetList"
      tags: ["Asset"]
      parameters:
        - $ref: '#/parameters/OffsetParam'
        - $ref: '#/parameters/LimitParam'
      responses:
        200:
          description: "ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Asset"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["asset:read"]
    post:
      description: "Createn a new asset"
      operationId: "AssetCreate"
      tags: ["Asset"]
      consumes: ["multipart/form-data"]
      parameters:
        - name: "audience_id"
          description: "The audience id"
          in: "formData"
          type: "string"
        - name: "title"
          description: "The asset title"
          in: "formData"
          type: "string"
          required: true
        - name: "file"
          description: "The asset payload"
          in: "formData"
          type: "file"
          required: true
        - name: "description"
          description: "The asset description"
          in: "formData"
          type: "string"
        - name: "public"
          description: "The public flag for the asset"
          in: "formData"
          type: "boolean"
      responses:
        201:
          description: "created"
          schema:
            $ref: "#/definitions/Asset"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["asset:write"]
      
  /assets/{asset_id}:
    parameters:
      - name: "asset_id"
        in: "path"
        description: "The asset id"
        type: "string"
        required: true
    get:
      description: "Get an asset by id"
      operationId: "AssetGet"
      tags: ["Asset"]
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Asset"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["asset:read"]
    patch:
      description: "Update asset by id"
      operationId: "AssetUpdate"
      tags: ["Asset"]
      parameters:
        - name: "asset"
          in: "body"
          required: true
          schema: 
            title: "AssetUpdateInput"
            type: "object"
            properties:
              name:
                description: "The asset name"
                type: "string"
              description:
                description: "The asset description"
                type: "string"
              permissions:
                type: "object"
                properties: 
                  add:
                    $ref: "#/definitions/Permissions"
                  remove:
                    $ref: "#/definitions/Permissions"
                  overwrite:
                    description: "Remove all existing permissions"
                    type: "boolean"
              metadata:
                $ref: "#/definitions/Map"
            example: {
              "permissions": {
                "add": {
                  "hiro": "profile"
                }
              }
            }
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Asset"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["asset:write"]
    delete:
      description: "Delete by id"
      operationId: "AssetDelete"
      tags: ["Asset"]
      responses:
        204:
          $ref: "#/responses/NoContent"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["asset:write"]

  /applications:
    head:
      description: "Return a count of applications"
      operationId: "ApplicationCount"
      tags: ["Application"]
      responses:
        204:
          $ref: "#/responses/NoContent"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["application:read"]
    get:
      description: "Query for applications"
      operationId: "ApplicationList"
      tags: ["Application"]
      parameters:
        - $ref: '#/parameters/OffsetParam'
        - $ref: '#/parameters/LimitParam'
      responses:
        200:
          description: "ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Application"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["application:read"]
    post:
      description: "Createn a new application"
      operationId: "ApplicationCreate"
      tags: ["Application"]
      consumes: ["application/json"]
      parameters:
        - name: "application"
          in: "body"
          required: true
          schema:
            title: "ApplicationCreateInput"
            type: "object"
            properties:
              name:
                description: "The application name"
                type: "string"
              description:
                description: "The application description"
                type: "string"
              type:
                description: "The oauth client type"
                type: "string"
                enum: ["web", "native", "machine"]
              permissions:
                $ref: "#/definitions/Permissions"
              grants:
                $ref: "#/definitions/Grants"
              uris:
                description: "Authorized application and redirect uris"
                type: "array"
                items:
                  type: "string"
                  format: "uri"
              metadata:
                $ref: "#/definitions/Map"
            required: ["name", "type"]
            example: {
              "name": "hiro",
              "type": "web"
            }
      responses:
        201:
          description: "created"
          schema:
            $ref: "#/definitions/Application"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["application:write"]
      
  /applications/{application_id}:
    parameters: 
      - name: "application_id"
        in: "path"
        description: "The application id"
        type: "string"
        required: true
    get:
      description: "Get an application by id"
      operationId: "ApplicationGet"
      tags: ["Application"]
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Application"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["application:read"]
    patch:
      description: "Update application by id"
      operationId: "ApplicationUpdate"
      tags: ["Application"]
      parameters:
        - name: "application"
          in: "body"
          required: true
          schema: 
            title: "ApplicationUpdateInput"
            type: "object"
            properties:
              name:
                description: "The application name"
                type: "string"
              description:
                description: "The application description"
                type: "string"
              type:
                description: "The oauth client type"
                type: "string"
                enum: ["web", "native", "machine"]
              permissions:
                type: "object"
                properties: 
                  add:
                    $ref: "#/definitions/Permissions"
                  remove:
                    $ref: "#/definitions/Permissions"
                  overwrite:
                    description: "Remove all existing permissions"
                    type: "boolean"
              grants:
                type: "object"
                properties: 
                  add:
                    $ref: "#/definitions/Grants"
                  remove:
                    $ref: "#/definitions/Grants"
                  overwrite:
                    description: "Remove all existing grants"
                    type: "boolean"
              uris:
                description: "Authorized application and redirect uris"
                type: "array"
                items:
                  type: "string"
                  format: "uri"
              metadata:
                $ref: "#/definitions/Map"
            required: ["name", "type"]
            example: {
              "name": "hiro",
              "type": "web"
            }
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Application"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["application:write"]
    delete:
      description: "Delete by id"
      operationId: "ApplicationDelete"
      tags: ["Application"]
      responses:
        204:
          $ref: "#/responses/NoContent"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["application:write"]

  /users:
    head:
      description: "Return a count of users"
      operationId: "UserCount"
      tags: ["User"]
      responses:
        204:
          $ref: "#/responses/NoContent"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["user:read"]
    get:
      description: "Query for users"
      operationId: "UserList"
      tags: ["User"]
      parameters:
        - $ref: '#/parameters/OffsetParam'
        - $ref: '#/parameters/LimitParam'
      responses:
        200:
          description: "ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["user:read"]
    post:
      description: "Createn a new user"
      operationId: "UserCreate"
      tags: ["User"]
      consumes: ["user/json"]
      parameters:
        - name: "user"
          in: "body"
          required: true
          schema:
            title: "UserCreateInput"
            type: "object"
            properties:
              login:
                description: "The user login"
                type: "string"
              password:
                description: "The new user's password"
                type: "string"
              roles:
                description: "Roles to grant to the user"
                type: "array"
                items:
                  type: "string"
              profile:
                $ref: "https://api.swaggerhub.com/apis/ModelRocket/oauth/1.0.0#/definitions/Profile"
              metadata:
                $ref: "#/definitions/Map"
            required: ["login"]
            example: {
              "login": "admin",
              "password": "password",
              "roles": ["user:admin", "author"],
              "profile": {
                "given_name": "Hiro",
                "family_name": "Protagonist",
                "email": "hiro@metaverse.com"
              }
            }
      responses:
        201:
          description: "created"
          schema:
            $ref: "#/definitions/User"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["user:write"]
      
  /users/{user_id}:
    parameters: 
      - name: "user_id"
        in: "path"
        description: "The user id"
        type: "string"
        required: true
    get:
      description: "Get an user by id"
      operationId: "UserGet"
      tags: ["User"]
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/User"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["user:read"]
    patch:
      description: "Update user by id"
      operationId: "UserUpdate"
      tags: ["User"]
      parameters:
        - name: "user"
          in: "body"
          required: true
          schema: 
            title: "UserUpdateInput"
            type: "object"
            properties:
              password:
                description: "The new user's password"
                type: "string"
              roles:
                description: "Roles to grant or remove from the user"
                type: "object"
                properties: 
                  add:
                    type: "array"
                    items:
                      type: "string"
                  remove:
                    type: "array"
                    items:
                      type: "string"
                  overwrite:
                    description: "Remove all existing roles"
                    type: "boolean"
              profile:
                $ref: "https://api.swaggerhub.com/apis/ModelRocket/oauth/1.0.0#/definitions/Profile"
              metadata:
                $ref: "#/definitions/Map"
              unlock:
                description: "unlock the user's account"
                type: "boolean"
            example: {
              "profile": {
                "phone": "+14085551212"
              }
            }
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/User"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["user:write"]
    delete:
      description: "Delete by id"
      operationId: "UserDelete"
      tags: ["User"]
      responses:
        204:
          $ref: "#/responses/NoContent"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["user:write"]

  /requests:
    head:
      description: "Return a count of request tokens"
      operationId: "RequestCount"
      tags: ["Token"]
      responses:
        204:
          $ref: "#/responses/NoContent"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["token:read"]
    get:
      description: "Query for request tokens"
      operationId: "RequestList"
      tags: ["Token"]
      parameters:
        - $ref: '#/parameters/OffsetParam'
        - $ref: '#/parameters/LimitParam'
        - name: "type"
          description: "filter on request token type"
          in: "query"
          type: "array"
          items:
            type: "string"
          collectionFormat: "csv"
        - name: "audience"
          description: "filter on access token audience"
          in: "query"
          type: "array"
          items:
            type: "string"
          collectionFormat: "csv"
        - name: "application"
          description: "filter on access token application"
          in: "query"
          type: "array"
          items:
            type: "string"
          collectionFormat: "csv"
        - name: "user"
          description: "filter on access token user"
          in: "query"
          type: "array"
          items:
            type: "string"
          collectionFormat: "csv"
      responses:
        200:
          description: "ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RequestToken"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["token:read"]

  /requests/{token_id}:
    parameters: 
      - name: "token_id"
        in: "path"
        description: "The token id"
        type: "string"
        required: true
    delete:
      description: "Delete by id"
      operationId: "RequestTokenDelete"
      tags: ["Token"]
      responses:
        204:
          $ref: "#/responses/NoContent"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["token:revoke"]

  /tokens:
    head:
      description: "Return a count of revokable access tokens"
      operationId: "TokenCount"
      tags: ["Token"]
      responses:
        204:
          $ref: "#/responses/NoContent"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["token:read"]
    get:
      description: "Query for revokable access tokens"
      operationId: "TokenList"
      tags: ["Token"]
      parameters:
        - $ref: '#/parameters/OffsetParam'
        - $ref: '#/parameters/LimitParam'
        - name: "audience"
          description: "filter on access token audience"
          in: "query"
          type: "array"
          items:
            type: "string"
          collectionFormat: "csv"
        - name: "application"
          description: "filter on access token application"
          in: "query"
          type: "array"
          items:
            type: "string"
          collectionFormat: "csv"
        - name: "user"
          description: "filter on access token user"
          in: "query"
          type: "array"
          items:
            type: "string"
          collectionFormat: "csv"
      responses:
        200:
          description: "ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AccessToken"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["token:read"]
    post:
      description: "Create a revokable access token"
      operationId: "TokenCreate"
      tags: ["Token"]
      parameters:
        - name: "token"
          in: "body"
          required: true
          schema:
            title: "TokenCreateInput"
            type: "object"
            properties:
              user:
                description: "The user id or login"
                type: "string"
              application_id:
                description: "The application id for the token"
                type: "string"
              expires_at:
                description: "The expiration for the token"
                type: "string"
                format: "date-time"
              claims:
                $ref: "#/definitions/Map"
              revokable:
                description: "if true a persisten store token will be created, otherwise a stateless beartoken will be returned"
                type: "boolean"
            required: ["audience_id", "application_id"]
            example: {
              "subject": "yt",
              "audience_id": "hiro",
              "application_id": "HZUKGUv3ajmKEbKDCXQW2g"
            }
      responses:
        200:
          description: "ok"
          schema:
            title: "BearerToken"
            type: "object"
            properties:
              access_token:
                description: "The base64 encoded, signed access token"
                type: "string"
              expires_in:
                description: "The token expiration in seconds from now"
                type: "integer"
              token_type:
                description: "The token type, always Bearer"
                type: "string"
                enum: ["Bearer"]
            example: {
              "access_token": "<redacted token data>",
              "expires_in": 2591999,
              "token_type": "Bearer"
            }
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["token:create"]

  /accesss/{token_id}:
    parameters: 
      - name: "token_id"
        in: "path"
        description: "The token id"
        type: "string"
        required: true
    delete:
      description: "Delete by id"
      operationId: "TokenRevoke"
      tags: ["Token"]
      responses:
        204:
          $ref: "#/responses/NoContent"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["token:revoke"]

  /sessions:
    head:
      description: "Return a count of session"
      operationId: "SessionCount"
      tags: ["Session"]
      responses:
        204:
          $ref: "#/responses/NoContent"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["token:read"]
    get:
      description: "Query for sessions"
      operationId: "SessionList"
      tags: ["Session"]
      parameters:
        - $ref: '#/parameters/OffsetParam'
        - $ref: '#/parameters/LimitParam'
        - name: "audience"
          description: "filter on session audience"
          in: "query"
          type: "array"
          items:
            type: "string"
          collectionFormat: "csv"
        - name: "user"
          description: "filter on session user"
          in: "query"
          type: "array"
          items:
            type: "string"
          collectionFormat: "csv"
      responses:
        200:
          description: "ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Session"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["session:read"]

  /sessions/{session_id}:
    parameters: 
      - name: "session_id"
        in: "path"
        description: "The session id"
        type: "string"
        required: true
    delete:
      description: "Delete by id"
      operationId: "SessionDelete"
      tags: ["Session"]
      responses:
        204:
          $ref: "#/responses/NoContent"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/ServerError"
      security:
        - oauth: ["session:destroy"]

parameters:
  OffsetParam:
    in: "query"
    name: "offset"
    description: " The number of items to skip before starting to collect the result set."
    type: "integer"
    format: "uint64"
    required: false
    minimum: 0
  LimitParam:
    in: "query"
    name: "limit"
    description: "The numbers of items to return."
    type: "integer"
    format: "uint64"
    minimum: 1
    maximum: 1000
    default: 50

responses:
  NoContent:
    description: "no content"
    headers:
      X-Query-Count:
        type: "integer"
        description: "Used for count method to return the count requested"
  Found:
    description: "found"
    headers:
      Location:
        type: "string"
        description: "The redirect location uri"
  BadRequest:
    description: "bad request"
    schema:
      $ref: "#/definitions/Error"
  Unauthorized:
    description: "access denied"
    schema:
      $ref: "#/definitions/Error"
  Forbidden:
    description: "forbidden"
    schema:
      $ref: "#/definitions/Error"
  NotFound:
    description: "not found"
    schema:
      $ref: "#/definitions/Error"
  Conflict:
    description: "conflict"
    schema:
      $ref: "#/definitions/Error"
  ServerError:
    description: "server error"
    schema:
      $ref: "#/definitions/Error"
  Unacceptable:
    description: "unacceptable"
    schema:
      $ref: "#/definitions/Error"